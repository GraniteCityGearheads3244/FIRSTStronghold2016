// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.Test;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.smartdashboard.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainlf;
    public static SpeedController driveTrainlr;
    public static SpeedController driveTrainrf;
    public static SpeedController driveTrainrr;
    public static RobotDrive driveTrainRobotDrive41;
    public static AnalogPotentiometer scissorpot;
    public static SpeedController scissormotor;
    public static PIDController scissorPIDController1;
    public static AnalogPotentiometer clawpot;
    public static SpeedController clawmotor;
    public static SpeedController wristSpeedController1;
    public static AnalogPotentiometer wristAnalogPotentiometer1pot;
    public static Relay pinballmotor;
    public static CANTalon seaLegsRight_Motor;
    public static CANTalon seaLegsLeft_Motor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainlf = new Talon(0);
        LiveWindow.addActuator("DriveTrain", "lf", (Talon) driveTrainlf);
        
        driveTrainlr = new Talon(1);
        LiveWindow.addActuator("DriveTrain", "lr", (Talon) driveTrainlr);
        
        driveTrainrf = new Talon(2);
        LiveWindow.addActuator("DriveTrain", "rf", (Talon) driveTrainrf);
        
        driveTrainrr = new Talon(3);
        LiveWindow.addActuator("DriveTrain", "rr", (Talon) driveTrainrr);
        
        driveTrainRobotDrive41 = new RobotDrive(driveTrainlf, driveTrainlr,
              driveTrainrf, driveTrainrr);
        
        driveTrainRobotDrive41.setSafetyEnabled(true);
        driveTrainRobotDrive41.setExpiration(0.1);
        driveTrainRobotDrive41.setSensitivity(0.5);
        driveTrainRobotDrive41.setMaxOutput(1.0);

        scissorpot = new AnalogPotentiometer(3, 5.0, 0.0);
        LiveWindow.addSensor("Scissor", "pot", scissorpot);
        
        scissormotor = new Spark(6);
        LiveWindow.addActuator("Scissor", "motor", (Spark) scissormotor);
        
        scissorPIDController1 = new PIDController(1.0, 0.0, 0.0, 0.0, scissorpot, scissormotor, 0.02);
        LiveWindow.addActuator("Scissor", "PID Controller 1", scissorPIDController1);
        scissorPIDController1.setContinuous(false);
        scissorPIDController1.setAbsoluteTolerance(0.2);

        scissorPIDController1.setOutputRange(-1.0, 1.0);
        clawpot = new AnalogPotentiometer(2, 5.0, 0.0);
        LiveWindow.addSensor("Claw", "pot", clawpot);
        
        clawmotor = new VictorSP(5);
        LiveWindow.addActuator("Claw", "motor", (VictorSP) clawmotor);
        
        wristSpeedController1 = new Spark(4);
        LiveWindow.addActuator("Wrist", "Speed Controller 1", (Spark) wristSpeedController1);
        
        wristAnalogPotentiometer1pot = new AnalogPotentiometer(1, 5.0, 0.0);
        LiveWindow.addSensor("Wrist", "Analog Potentiometer 1pot", wristAnalogPotentiometer1pot);
        
        pinballmotor = new Relay(0);
        LiveWindow.addActuator("pinball", "motor", pinballmotor);
        
        seaLegsRight_Motor = new CANTalon(2);
        LiveWindow.addActuator("SeaLegs", "Right_Motor", seaLegsRight_Motor);
        
        seaLegsLeft_Motor = new CANTalon(1);
        LiveWindow.addActuator("SeaLegs", "Left_Motor", seaLegsLeft_Motor);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
