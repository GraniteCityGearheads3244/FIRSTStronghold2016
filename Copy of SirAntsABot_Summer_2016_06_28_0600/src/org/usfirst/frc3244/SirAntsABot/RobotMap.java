// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.SirAntsABot;

import org.usfirst.frc3244.SirAntsABot.RobotMap.RobotSeaLegsSettings;
import org.usfirst.frc3244.SirAntsABot.subsystems.NordicSpeedController;
import edu.wpi.first.wpilibj.RobotDrive;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.Victor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainMotor_Right_Front;
    public static SpeedController driveTrainMotor_Right_Rear;
    public static SpeedController driveTrainMotor_Left_Rear;
    public static SpeedController driveTrainMotor_Left_Front;
    public static AnalogGyro driveTrainRobot_Gyro;
    public static Encoder driveTrainEncoder_Left_Front;
    public static Encoder driveTrainEncoder_Left_Rear;
    public static Encoder driveTrainEncoder_Right_Rear;
    public static Encoder driveTrainEncoder_Right_Front;
    public static Relay pinBallMotor_PinBall;
    public static DigitalInput pinBalllimit_Switch_Pinball_Reset;
    public static SpeedController scissorPIDmotor_Height;
    public static AnalogPotentiometer scissorPIDpot_Height;
    public static SpeedController wristPIDMotor_Wrist;
    public static AnalogPotentiometer wristPIDpot_Angle;
    public static PowerDistributionPanel controlPDP;
    public static SpeedController clawsPIDMotor_Claws;
    public static AnalogPotentiometer clawsPIDPot_Claws;
    public static CANTalon seaLegsMotor_Left;
    public static Encoder seaLegsEncoder_Left;
    public static CANTalon seaLegsMotor_Right;
    public static Encoder seaLegsEncoder_Right;
    public static DigitalInput seaLegsLimit_Switch_Left;
    public static DigitalInput seaLegsLimit_Switch_Right;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Relay cameraLight;
    public static AnalogInput US_Sensor;
    
    
    //SETTINGS
    public static final double WRIST_STOW_ANGLE = 87;
    public static final double HIGH_GOAL_ANGLE_FROM_RAMP = 77;
    public static final double LOW_GOAL_ANGLE = 15;
    
    
    public static final double SCISSOR_CLIMB_REACH_BAR = 73.8;//73;
    public static final double SCISSOR_CLIMB_LIFT_BOT =	25; //42 At the test field was short
    public static final double SCISSOR_STOW_POS = 14.5;
    public static final double SCISSOR_DEFENCE_POS = 45;
    
    
    
    public static final double AUTO_DRIVE_DISTANCE_TO_OBSTICAL = 54;
    public static final double AUTO_DRIVE_DISTANCE_UNDER_LOWBAR = 150;
    public static final double AUTO_DRIVE_STRAFE_ONE_STATION = 57;
    
    //public static final double VELOCITY_TURBO = 0.5;	//1
    //public static final double VELOCITY_NORMAL = 0.3;	//.7
    //public static final double VELOCITY_SNAIL = 0.2;	//.3
    
    //public static boolean isCompetitionBot = true;
    public static boolean isCompetitionBot = false; // used when DemoToggle_Command was deployed
    
    public enum RobotSeaLegsSettings {
    	MINIMAL_SPEED(0.1,0.1),
    	MAX_SPEED(0.75,0.75),
    	JOG_SPEED(0.1,0.1),
    	ENCODER_DISTANCEPERPULSE(1.0,1.0);
    	
    	private final double m_competitionSetting;
		private final double m_practiceSetting;
		
		public double get() {
			return isCompetitionBot ? m_competitionSetting : m_practiceSetting; 
		}
		
		RobotSeaLegsSettings(double competitionSetting, double practiceSetting) {
	    	m_competitionSetting = competitionSetting;
	    	m_practiceSetting = practiceSetting;
		}
    }
  
   
    //Start Code to use the NorticSpeedControler
    public enum RobotDriveTrainSettings {
		ENCODER_TO_360(1.0, 360.0/250.0),
		ROTATION_P_VALUE(0.04, 0.04), 
		MINIMAL_DRIVE_SPEED(-1, -.05),
		MAX_DRIVE_SPEED(1, .6),
		DEADBAND(0.2,0.2),
		VELOCITY_TURBO(1.0,0.5),
		VELOCITY_NORMAL(0.7,0.3),
		VELOCITY_SNAIL(0.3,0.2);
	
		private final double m_competitionSetting;
		private final double m_practiceSetting;
		
		public double get() {
			return isCompetitionBot ? m_competitionSetting : m_practiceSetting; 
		}
		
		RobotDriveTrainSettings(double competitionSetting, double practiceSetting) {
	    	m_competitionSetting = competitionSetting;
	    	m_practiceSetting = practiceSetting;
		}
	}
   
    //Settings for the CLAW Potentiometer
    public static boolean isGear_120_Tooth = false;
    public enum RobotClawGearSettings {
    	//PARRAMETER(120 Tooth, 80 Tooth)
    	FULL_RANGE(7.5,12.2), 
    	OFFSET(13,8.48),
    	KP(2.0,0.25),
    	KI(0.0,0.001),
    	KD(0.0,0.0);
    	
    	private final double m_Gear_120_Tooth_Setting;
		private final double m_Gear_80_Tooth_Setting;
		
		public double get() {
			return isGear_120_Tooth ? m_Gear_120_Tooth_Setting : m_Gear_80_Tooth_Setting; 
		}
		
		RobotClawGearSettings(double Gear_120_Tooth_Setting, double Gear_80_Tooth_Setting) {
	    	m_Gear_120_Tooth_Setting = Gear_120_Tooth_Setting;
	    	m_Gear_80_Tooth_Setting = Gear_80_Tooth_Setting;
		}
    }
    
    public static RobotDrive driveTrainRobotDrive41;

    public static NordicSpeedController nordicLF = null;
    public static NordicSpeedController nordicLR = null;
    public static NordicSpeedController nordicRF = null;
    public static NordicSpeedController nordicRR = null;
    
    //End Code to use the NorticSpeedControler
    
    public static RobotDrive seaLegsSeaLeg_Drive;
    
    public static NordicSpeedController nordicSeaLeg_Right = null;
    public static NordicSpeedController nordicSeaLeg_Left = null;
    
    
    
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainMotor_Right_Front = new Talon(2);
        LiveWindow.addActuator("DriveTrain", "Motor_Right_Front", (Talon) driveTrainMotor_Right_Front);
        
        driveTrainMotor_Right_Rear = new Talon(3);
        LiveWindow.addActuator("DriveTrain", "Motor_Right_Rear", (Talon) driveTrainMotor_Right_Rear);
        
        driveTrainMotor_Left_Rear = new Talon(1);
        LiveWindow.addActuator("DriveTrain", "Motor_Left_Rear", (Talon) driveTrainMotor_Left_Rear);
        
        driveTrainMotor_Left_Front = new Talon(0);
        LiveWindow.addActuator("DriveTrain", "Motor_Left_Front", (Talon) driveTrainMotor_Left_Front);
        
        driveTrainRobot_Gyro = new AnalogGyro(0);
        LiveWindow.addSensor("DriveTrain", "Robot_Gyro", driveTrainRobot_Gyro);
        driveTrainRobot_Gyro.setSensitivity(0.007);
        driveTrainEncoder_Left_Front = new Encoder(0, 1, true, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Encoder_Left_Front", driveTrainEncoder_Left_Front);
        driveTrainEncoder_Left_Front.setDistancePerPulse(0.0708);
        driveTrainEncoder_Left_Front.setPIDSourceType(PIDSourceType.kRate);
        driveTrainEncoder_Left_Rear = new Encoder(2, 3, true, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Encoder_Left_Rear", driveTrainEncoder_Left_Rear);
        driveTrainEncoder_Left_Rear.setDistancePerPulse(1.0);
        driveTrainEncoder_Left_Rear.setPIDSourceType(PIDSourceType.kRate);
        driveTrainEncoder_Right_Rear = new Encoder(6, 7, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Encoder_Right_Rear", driveTrainEncoder_Right_Rear);
        driveTrainEncoder_Right_Rear.setDistancePerPulse(1.0);
        driveTrainEncoder_Right_Rear.setPIDSourceType(PIDSourceType.kRate);
        driveTrainEncoder_Right_Front = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Encoder_Right_Front", driveTrainEncoder_Right_Front);
        driveTrainEncoder_Right_Front.setDistancePerPulse(0.0708);
        driveTrainEncoder_Right_Front.setPIDSourceType(PIDSourceType.kRate);
        pinBallMotor_PinBall = new Relay(0);
        LiveWindow.addActuator("PinBall", "Motor_PinBall", pinBallMotor_PinBall);
        
        pinBalllimit_Switch_Pinball_Reset = new DigitalInput(8);
        LiveWindow.addSensor("PinBall", "limit_Switch_Pinball_Reset", pinBalllimit_Switch_Pinball_Reset);
        
        scissorPIDmotor_Height = new Spark(6);
        LiveWindow.addActuator("ScissorPID", "motor_Height", (Spark) scissorPIDmotor_Height);
        
        scissorPIDpot_Height = new AnalogPotentiometer(3, 243.82, -24.7);
        LiveWindow.addSensor("ScissorPID", "pot_Height", scissorPIDpot_Height);
        
        wristPIDMotor_Wrist = new Spark(4);
        LiveWindow.addActuator("WristPID", "Motor_Wrist", (Spark) wristPIDMotor_Wrist);
        
        wristPIDpot_Angle = new AnalogPotentiometer(1, 293.0, -123.2);
        LiveWindow.addSensor("WristPID", "pot_Angle", wristPIDpot_Angle);
        
        controlPDP = new PowerDistributionPanel(0);
        LiveWindow.addSensor("Control", "PDP", controlPDP);
        
        clawsPIDMotor_Claws = new Victor(5);
        LiveWindow.addActuator("ClawsPID", "Motor_Claws", (Victor) clawsPIDMotor_Claws);
        
        clawsPIDPot_Claws = new AnalogPotentiometer(2, RobotClawGearSettings.FULL_RANGE.get(), RobotClawGearSettings.OFFSET.get());
        LiveWindow.addSensor("ClawsPID", "Pot_Claws", clawsPIDPot_Claws);
        
        seaLegsMotor_Left = new CANTalon(2);
        LiveWindow.addActuator("SeaLegs", "Motor_Left", seaLegsMotor_Left);
        
        seaLegsEncoder_Left = new Encoder(12, 13, false, EncodingType.k4X);
        LiveWindow.addSensor("SeaLegs", "Encoder_Left", seaLegsEncoder_Left);
        seaLegsEncoder_Left.setDistancePerPulse(1.0);
        seaLegsEncoder_Left.setPIDSourceType(PIDSourceType.kRate);
        seaLegsMotor_Right = new CANTalon(1);
        LiveWindow.addActuator("SeaLegs", "Motor_Right", seaLegsMotor_Right);
        
        seaLegsEncoder_Right = new Encoder(11, 10, false, EncodingType.k4X);
        LiveWindow.addSensor("SeaLegs", "Encoder_Right", seaLegsEncoder_Right);
        seaLegsEncoder_Right.setDistancePerPulse(1.0);
        seaLegsEncoder_Right.setPIDSourceType(PIDSourceType.kRate);
        seaLegsLimit_Switch_Left = new DigitalInput(14);
        LiveWindow.addSensor("SeaLegs", "Limit_Switch_Left", seaLegsLimit_Switch_Left);
        
        seaLegsLimit_Switch_Right = new DigitalInput(15);
        LiveWindow.addSensor("SeaLegs", "Limit_Switch_Right", seaLegsLimit_Switch_Right);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        cameraLight = new Relay(1);
        LiveWindow.addActuator("Camera", "Camera_Light", cameraLight);
        US_Sensor = new AnalogInput(4);
        LiveWindow.addSensor("DriveTrain", "UltraSonic", US_Sensor);
        
      //Set the SeaLeg Encoders up
        //seaLegs_Left_PIDEncoder_Left.setDistancePerPulse(RobotSeaLegsSettings.ENCODER_DISTANCEPERPULSE.get());
        //seaLegs_Right_PIDEncoder_Right.setDistancePerPulse(RobotSeaLegsSettings.ENCODER_DISTANCEPERPULSE.get());
        //Simple DriveTrain
        
        driveTrainRobotDrive41 = new RobotDrive(driveTrainMotor_Left_Front, driveTrainMotor_Left_Rear,
                driveTrainMotor_Right_Front, driveTrainMotor_Right_Rear);
          
        

        //Start Code to use the NorticSpeedControler
        /** This Section is to use the Nordic Speed Controler
        driveTrainEncoder_Left_Front.setDistancePerPulse(RobotSetting.DRIVETRAIN_ENCODER_TO_360.get());
        driveTrainEncoder_Left_Rear.setDistancePerPulse(RobotSetting.DRIVETRAIN_ENCODER_TO_360.get());
        driveTrainEncoder_Right_Front.setDistancePerPulse(RobotSetting.DRIVETRAIN_ENCODER_TO_360.get());
        driveTrainEncoder_Right_Rear.setDistancePerPulse(RobotSetting.DRIVETRAIN_ENCODER_TO_360.get());
        double p = 0.01;
        double i = 0.00;
        double d = 0;
        nordicLF = new NordicSpeedController(driveTrainMotor_Left_Front, driveTrainEncoder_Left_Front,p,i,d);
        nordicLR = new NordicSpeedController(driveTrainMotor_Left_Rear, driveTrainEncoder_Left_Rear,p,i,d);
        nordicRF = new NordicSpeedController(driveTrainMotor_Right_Front, driveTrainEncoder_Right_Front,p,i,d);
        nordicRR = new NordicSpeedController(driveTrainMotor_Right_Rear, driveTrainEncoder_Right_Rear,p,i,d);
        
        driveTrainRobotDrive41 = new RobotDrive(nordicLF, nordicLR, nordicRF, nordicRR);
        
        //Had to phyisiclay reverse Wires!!!
        //driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        //driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        //driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        //driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        */
          
        driveTrainRobotDrive41.setSafetyEnabled(true);
        driveTrainRobotDrive41.setExpiration(0.1);
        driveTrainRobotDrive41.setSensitivity(0.5);
        driveTrainRobotDrive41.setMaxOutput(1.0);
        
        //Start SeaLeg Code
        
        double SeaLeg_kp = 1;
        double SeaLeg_ki = 0.00;
        double SeaLeg_kd = 0;
        
        nordicSeaLeg_Left = new NordicSpeedController(seaLegsMotor_Left, seaLegsEncoder_Left,SeaLeg_kp,SeaLeg_ki,SeaLeg_kd);
        nordicSeaLeg_Right = new NordicSpeedController(seaLegsMotor_Right, seaLegsEncoder_Right,SeaLeg_kp,SeaLeg_ki,SeaLeg_kd);
        
        seaLegsSeaLeg_Drive = new RobotDrive(nordicSeaLeg_Left, nordicSeaLeg_Right);
        
        seaLegsSeaLeg_Drive.setSafetyEnabled(false);
        seaLegsSeaLeg_Drive.setExpiration(0.1);
        seaLegsSeaLeg_Drive.setSensitivity(0.5);
        seaLegsSeaLeg_Drive.setMaxOutput(1.0);

        seaLegsSeaLeg_Drive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
    }
}
