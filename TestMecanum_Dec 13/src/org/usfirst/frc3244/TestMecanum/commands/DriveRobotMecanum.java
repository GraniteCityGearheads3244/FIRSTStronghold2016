// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.TestMecanum.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3244.TestMecanum.Robot;
import org.usfirst.frc3244.TestMecanum.RobotMap;

/**
 *
 */
public class  DriveRobotMecanum extends Command {
	double x_target = 0;
	double y_target = 0;
	double r_target = 0;
	double lastScan = 0;
	double thisScan = 0;
	double x_command = 0;
	double y_command = 0;
	double r_command = 0;
	double l_rate = .1;  //linear rate of change
	double p_rate = .1;  //percent rate of change
	double max = .75;
	double min = .75;
	double deadband = .2;	
	Timer t = new Timer();

    public DriveRobotMecanum() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	t.start();
    	t.reset();   
    	thisScan = t.get();
    	lastScan = thisScan;
    	//Put Rate on the SmartDashboard for user tuning
    	SmartDashboard.putNumber("Rate", l_rate);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    	//Get JoyStick values
    	x_target = Robot.oi.xbox.getRawAxis(0);
    	y_target = Robot.oi.xbox.getRawAxis(1);
    	r_target = Robot.oi.xbox.getRawAxis(4);
    	//Get Gyro
    	double gyro = Robot.driveTrain.getGyro();
    	SmartDashboard.putNumber("Current Gyro", gyro);
    	//Get time since last iteration
    	thisScan = t.get();
    	//Get the Rate from the SmartDashboard
    	SmartDashboard.getNumber("Rate");

    	//Check Target Deadband, Min, Max
    	x_target = target(x_target,deadband,min,max);
    	y_target = target(y_target,deadband,min,max);
    	r_target = target(r_target,deadband,min,max);
      	
    	//Rate of Change
    	if(thisScan > lastScan + 100){
    		x_command = acc_dec(x_command, x_target);
    		y_command = acc_dec(y_command, y_target);
    		r_command = acc_dec(r_command, r_target);
    		
    		lastScan = thisScan;
    		t.reset();
    	}
    	
    	//clamp values between -1 and 1 in case somehow it got outside these values
    	x_command = clampCommand(x_command);
    	y_command = clampCommand(y_command);
    	r_command = clampCommand(r_command);
    	
    	//Send Commands to Drive Train
    	Robot.driveTrain.driveMecanum(x_command,y_command,r_command,gyro);
    	
    } 

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	//Never Finished 
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
    
    
    //****************** Start Of My Supporting Logix **********************\\
    
    
    /**
     * 
     * @param target
     * @return
     */
    private double target(double target,double deadband, double min, double max){
    	if(Math.abs(target)<deadband){
    		target=0;
    	}
    	
    	//Check Target less than max
    	if(target>max){
    		target=max;
    	}
    	
    	//Check Target Greater Than Min
    	if(target<-max){
    		target=-max;
    	}
    	
    	return target;
    }
    
    /**
     * Use Current command speed commpared to Target speed then adds/sub
     * @param command
     * @param target
     * @return 
     */
    private double acc_dec (double command, double target){
    	if (target == 0){
    		// FAST STOP
    		return command *.5;
    	}//else{ //Use rate to change command speed
    		if (command<target){
    			return command + l_rate;
    		}else if (command>target){
    			return command - l_rate;
    		}else{
    			return command;
    		}
    	//}
    }
    /**
     * Clamp Value between -1 and 1
     * @param command
     * @return 
     */
    private double clampCommand (double command){
    	if(command<-1){
    		return -1;
    	}else if (command > 1){
    		return 1;
    	}else{
    		return command;
    	}
    	
    }
}
