// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.SirAntsABot.subsystems;

import org.usfirst.frc3244.SirAntsABot.Robot;
import org.usfirst.frc3244.SirAntsABot.RobotMap;
import org.usfirst.frc3244.SirAntsABot.commands.*;

import edu.wpi.first.wpilibj.Counter;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.Relay.Value;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class PinBall extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Relay motor_PinBall = RobotMap.pinBallMotor_PinBall;
    private final DigitalInput limit_Switch_Pinball_Reset = RobotMap.pinBalllimit_Switch_Pinball_Reset;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    Counter counter = new Counter(limit_Switch_Pinball_Reset);
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public boolean my_PinballReady(){
    	return !limit_Switch_Pinball_Reset.get();
    }
    
    public boolean my_isSwitchSet() {
        return counter.get() > 0;
    }

    public void my_initializeCounter() {
        counter.reset();
    }

    public void myPinballMotorRun(){
    	motor_PinBall.set(Value.kReverse);
    	//Claw has move can not guaranty ball
        Robot.oi.launchPad.setOutput(1, false);
    }
    
    public void myPinballMotorStop(){
    	motor_PinBall.set(Value.kOff);
    }
    
    
	public void myPinballMotorReverse() {
		motor_PinBall.set(Value.kForward);
		//Claw has move can not guaranty ball
        Robot.oi.launchPad.setOutput(1, false);
		
	}
	public void updateStatus(){
    	SmartDashboard.putBoolean("Pin Ball Set", my_PinballReady());
    }
}

