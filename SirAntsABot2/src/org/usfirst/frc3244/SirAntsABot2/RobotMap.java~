// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.SirAntsABot2;


import org.usfirst.frc3244.SirAntsABot2.subsystems.NordicSpeedController;
import edu.wpi.first.wpilibj.RobotDrive;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static AnalogGyro driveTrainRobot_Gyro;
    public static Encoder driveTrainEncoder_Left_Front;
    public static Encoder driveTrainEncoder_Left_Rear;
    public static Encoder driveTrainEncoder_Right_Rear;
    public static Encoder driveTrainEncoder_Right_Front;
    public static SpeedController driveTrainMotor_Left_Front;
    public static SpeedController driveTrainMotor_Left_Rear;
    public static SpeedController driveTrainMotor_Right_Rear;
    public static SpeedController driveTrainMotor_Right_Front;
    public static RobotDrive driveTrainRobotDrive41;
    public static SpeedController clawPIDMotor_Claw;
    public static AnalogPotentiometer clawPIDpot_Width;
    public static Relay pinBallMotor_PinBall;
    public static DigitalInput pinBalllimit_Switch_Pinball_Reset;
    public static SpeedController wristPIDMotor_Wrist;
    public static AnalogPotentiometer wristPIDpot_Angle;
    public static AnalogPotentiometer scissorPIDpot_Height;
    public static SpeedController scissorPIDmotor_Height;
    public static CANTalon seaLegsMotor_Left;
    public static CANTalon seaLegsMotor_Right;
    public static Encoder seaLegsEncoder_Left;
    public static Encoder seaLegsEncoder_Right;
    public static PowerDistributionPanel controlPDP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainRobot_Gyro = new AnalogGyro(0);
        LiveWindow.addSensor("DriveTrain", "Robot_Gyro", driveTrainRobot_Gyro);
        driveTrainRobot_Gyro.setSensitivity(0.007);
        driveTrainEncoder_Left_Front = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Encoder_Left_Front", driveTrainEncoder_Left_Front);
        driveTrainEncoder_Left_Front.setDistancePerPulse(1.0);
        driveTrainEncoder_Left_Front.setPIDSourceType(PIDSourceType.kRate);
        driveTrainEncoder_Left_Rear = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Encoder_Left_Rear", driveTrainEncoder_Left_Rear);
        driveTrainEncoder_Left_Rear.setDistancePerPulse(1.0);
        driveTrainEncoder_Left_Rear.setPIDSourceType(PIDSourceType.kRate);
        driveTrainEncoder_Right_Rear = new Encoder(6, 7, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Encoder_Right_Rear", driveTrainEncoder_Right_Rear);
        driveTrainEncoder_Right_Rear.setDistancePerPulse(1.0);
        driveTrainEncoder_Right_Rear.setPIDSourceType(PIDSourceType.kRate);
        driveTrainEncoder_Right_Front = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Encoder_Right_Front", driveTrainEncoder_Right_Front);
        driveTrainEncoder_Right_Front.setDistancePerPulse(1.0);
        driveTrainEncoder_Right_Front.setPIDSourceType(PIDSourceType.kRate);
        driveTrainMotor_Left_Front = new Talon(0);
        LiveWindow.addActuator("DriveTrain", "Motor_Left_Front", (Talon) driveTrainMotor_Left_Front);
        
        driveTrainMotor_Left_Rear = new Talon(1);
        LiveWindow.addActuator("DriveTrain", "Motor_Left_Rear", (Talon) driveTrainMotor_Left_Rear);
        
        driveTrainMotor_Right_Rear = new Talon(3);
        LiveWindow.addActuator("DriveTrain", "Motor_Right_Rear", (Talon) driveTrainMotor_Right_Rear);
        
        driveTrainMotor_Right_Front = new Talon(2);
        LiveWindow.addActuator("DriveTrain", "Motor_Right_Front", (Talon) driveTrainMotor_Right_Front);
        
        driveTrainRobotDrive41 = new RobotDrive(driveTrainMotor_Left_Front, driveTrainMotor_Left_Rear,
              driveTrainMotor_Right_Front, driveTrainMotor_Right_Rear);
        
        driveTrainRobotDrive41.setSafetyEnabled(true);
        driveTrainRobotDrive41.setExpiration(0.1);
        driveTrainRobotDrive41.setSensitivity(0.5);
        driveTrainRobotDrive41.setMaxOutput(1.0);

        driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        clawPIDMotor_Claw = new VictorSP(5);
        LiveWindow.addActuator("ClawPID", "Motor_Claw", (VictorSP) clawPIDMotor_Claw);
        
        clawPIDpot_Width = new AnalogPotentiometer(2, 5.0, 0.0);
        LiveWindow.addSensor("ClawPID", "pot_Width", clawPIDpot_Width);
        
        pinBallMotor_PinBall = new Relay(0);
        LiveWindow.addActuator("PinBall", "Motor_PinBall", pinBallMotor_PinBall);
        
        pinBalllimit_Switch_Pinball_Reset = new DigitalInput(8);
        LiveWindow.addSensor("PinBall", "limit_Switch_Pinball_Reset", pinBalllimit_Switch_Pinball_Reset);
        
        wristPIDMotor_Wrist = new Spark(4);
        LiveWindow.addActuator("WristPID", "Motor_Wrist", (Spark) wristPIDMotor_Wrist);
        
        wristPIDpot_Angle = new AnalogPotentiometer(1, 370.0, 0.0);
        LiveWindow.addSensor("WristPID", "pot_Angle", wristPIDpot_Angle);
        
        scissorPIDpot_Height = new AnalogPotentiometer(3, 360.0, 0.0);
        LiveWindow.addSensor("ScissorPID", "pot_Height", scissorPIDpot_Height);
        
        scissorPIDmotor_Height = new Spark(6);
        LiveWindow.addActuator("ScissorPID", "motor_Height", (Spark) scissorPIDmotor_Height);
        
        seaLegsMotor_Left = new CANTalon(2);
        LiveWindow.addActuator("SeaLegs", "Motor_Left", seaLegsMotor_Left);
        
        seaLegsMotor_Right = new CANTalon(1);
        LiveWindow.addActuator("SeaLegs", "Motor_Right", seaLegsMotor_Right);
        
        seaLegsEncoder_Left = new Encoder(12, 13, false, EncodingType.k4X);
        LiveWindow.addSensor("SeaLegs", "Encoder_Left", seaLegsEncoder_Left);
        seaLegsEncoder_Left.setDistancePerPulse(1.0);
        seaLegsEncoder_Left.setPIDSourceType(PIDSourceType.kRate);
        seaLegsEncoder_Right = new Encoder(10, 11, false, EncodingType.k4X);
        LiveWindow.addSensor("SeaLegs", "Encoder_Right", seaLegsEncoder_Right);
        seaLegsEncoder_Right.setDistancePerPulse(1.0);
        seaLegsEncoder_Right.setPIDSourceType(PIDSourceType.kRate);
        controlPDP = new PowerDistributionPanel(0);
        LiveWindow.addSensor("Control", "PDP", controlPDP);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        

    }
}
