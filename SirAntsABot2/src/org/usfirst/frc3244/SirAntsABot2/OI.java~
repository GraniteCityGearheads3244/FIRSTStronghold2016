// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.SirAntsABot2;

import org.usfirst.frc3244.SirAntsABot2.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc3244.SirAntsABot2.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton left_Bumper;
    public JoystickButton right_Bumper;
    public JoystickButton a;
    public JoystickButton y;
    public JoystickButton start;
    public JoystickButton back;
    public JoystickButton x;
    public JoystickButton b;
    public Joystick xbox_1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        xbox_1 = new Joystick(0);
        
        b = new JoystickButton(xbox_1, 2);
        b.whileHeld(new Claw_Open(0));
        x = new JoystickButton(xbox_1, 3);
        x.whileHeld(new Claw_Close(0));
        back = new JoystickButton(xbox_1, 7);
        back.whenReleased(new PinBall_Reset());
        start = new JoystickButton(xbox_1, 8);
        start.whenReleased(new PinBall_Cycle());
        y = new JoystickButton(xbox_1, 4);
        y.whileHeld(new Wrist_Jog_Up());
        a = new JoystickButton(xbox_1, 1);
        a.whileHeld(new Wrist_Jog_Down());
        right_Bumper = new JoystickButton(xbox_1, 6);
        right_Bumper.whileHeld(new SeaLeg_Right());
        left_Bumper = new JoystickButton(xbox_1, 5);
        left_Bumper.whileHeld(new SeaLeg_Left());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("PinBall_Reset", new PinBall_Reset());
        SmartDashboard.putData("PinBall_Shoot", new PinBall_Shoot());
        SmartDashboard.putData("PinBall_Cycle", new PinBall_Cycle());
        SmartDashboard.putData("Claw_Open: Open", new Claw_Open(4.9));
        SmartDashboard.putData("Claw_Close: Close", new Claw_Close(1));
        SmartDashboard.putData("Claw_Fire_Grip: Fire_Grip", new Claw_Fire_Grip(1.5));
        SmartDashboard.putData("Wrist_To_Lower: Lower", new Wrist_To_Lower(1));
        SmartDashboard.putData("Wrist_To_Stow: Stow", new Wrist_To_Stow(85));
        SmartDashboard.putData("Wrist_To_Setpoint: Fouty_Five", new Wrist_To_Setpoint(45));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getXbox_1() {
        return xbox_1;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

