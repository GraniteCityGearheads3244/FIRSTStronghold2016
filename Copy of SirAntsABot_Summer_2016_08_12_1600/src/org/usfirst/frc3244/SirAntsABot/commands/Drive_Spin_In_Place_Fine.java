package org.usfirst.frc3244.SirAntsABot.commands;

import java.util.LinkedList;

import org.usfirst.frc3244.SirAntsABot.RobotMap;
import org.usfirst.frc3244.SirAntsABot.Robot;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class Drive_Spin_In_Place_Fine extends Command {
	
	private LinkedList<Double> fifo = null;
    private double averagegyro = 0;
    private boolean sample_gyro = false;
    private double spin = 0;
    private double spinTarget = 0;
    
    public Drive_Spin_In_Place_Fine(double s) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        spin = s;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	
    	sample_gyro = false;
    	fifo = new LinkedList<Double>();
    	fifo.clear();	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	//SmartDashboard.putNumber("new spin", spin);
    	//SmartDashboard.putData("Gyro", RobotMap.driveTrainRobot_Gyro);
    	//SmartDashboard.putNumber("GY", Robot.driveTrain.my_Get_Gyro());
    	System.out.println("RUNNING");
    	if(fifo.size()>9){
    		double sum = 0;
    		for(int i =0;i<fifo.size();i++){
    			sum = sum + fifo.get(i);
    		}
    		averagegyro = sum/fifo.size();
    		fifo.removeFirst();
    		
    		if(!sample_gyro){
    			spinTarget = averagegyro + spin;
        		sample_gyro = true;
        		
        	}
    		
    		double kpSpeed = (spinTarget - averagegyro)/spinTarget;
    		//SmartDashboard.putNumber("kpSpeed", kpSpeed);
    		double commandSpeed = 1*kpSpeed;
    		if (commandSpeed<.15)commandSpeed=.15;
    		if (commandSpeed>.15)commandSpeed=.15;
    		if(spin<0){commandSpeed = -commandSpeed;}
    		//SmartDashboard.putNumber("Drive commandSpeed", commandSpeed);
    		//Robot.driveTrain.tankDrive(-commandSpeed, -commandSpeed);
    		Robot.driveTrain.my_Drive_Mecanum(0, 0, commandSpeed, 0);
    	}
    	fifo.add(new Double(Robot.driveTrain.my_Get_Gyro()));
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return sample_gyro && averagegyro > spinTarget-.21 && averagegyro < spinTarget+.21;
    }

    // Called once after isFinished returns true
    protected void end() {
    	//Robot.driveTrain.tankDrive(0, 0);
    	Robot.driveTrain.my_Drive_Mecanum(0, 0, 0, 0);
    	System.out.println("Drive_Spin_In_Place_Fine() END");
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
    
    private void diagnostics(){
    	SmartDashboard.putNumber("Drive spinTarget", spinTarget);
    }
}
