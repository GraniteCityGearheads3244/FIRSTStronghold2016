// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.CMBA.subsystems;

import org.usfirst.frc3244.CMBA.RobotMap;
import org.usfirst.frc3244.CMBA.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveSystem extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController motorRight = RobotMap.driveSystemMotorRight;
    SpeedController motorLeft = RobotMap.driveSystemMotorLeft;
    RobotDrive robotDrive = RobotMap.driveSystemRobotDrive;
    AnalogGyro gyro = RobotMap.driveSystemGyro;
    Encoder motorLeftEncoder = RobotMap.driveSystemMotorLeftEncoder;
    Encoder motorRightEncoder = RobotMap.driveSystemMotorRightEncoder;
    AnalogInput ultraSonic = RobotMap.driveSystemUltraSonic;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new DriveFPS());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    /**
     *Classic Arcade Drive with a single Joystick
     * @param stick The joystick to use for Arcade single-stick driving. The Y-axis will be selected
     * for forwards/backwards and the X-axis will be selected for rotation rate.
     */
     public void arcadeDrive(Joystick joy){
     	robotDrive.arcadeDrive(joy);
     }
     /**
      *Arcade Drive similar to FPS One stick is Forward One Sick for Turn
      *@param moveValue The value to use for forwards/backwards
      *@param rotateValue The value to use for the rotate right/left
      *@author Applefamily
      */
      public void arcadeDrive(double moveValue,double rotateValue){
      	robotDrive.arcadeDrive(-moveValue*RobotMap.transmition,-rotateValue*RobotMap.transmition);
      }
     
      /**
       *Arcade Drive similar to FPS One stick is Forward One Sick for Turn
       * @param leftValue The value of the left stick.
       * @param rightValue The value of the right stick.
       */
      public void tankDrive(double leftValue, double rightValue){
    	  double kp = SmartDashboard.getNumber("Drive Straight Correction");
      		robotDrive.tankDrive(leftValue+(leftValue*kp), rightValue);
      }
      
      
      public void driveStraight(double speed, double correction){
    	 SmartDashboard.putNumber("Drive Straight correction", correction);
    	  robotDrive.tankDrive(speed+(speed*correction), speed);
      }
      
      
      /**
       * Get Current Gyro from DriveSytem
       * @return
       */
      public double getGyro(){
  		return gyro.getAngle();
      }
     
      /**
       * Get the Ultrasonic Average Voltage from the DriveSystem
       * @return
       */
      public double getUSDistance(){
      	return ultraSonic.getAverageVoltage();//uS.getAverageVoltage();
      }
      
  	
  }
