// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.CMBA;

import org.usfirst.frc3244.CMBA.commands.*;
import org.usfirst.frc3244.CMBA.Robot;
import org.usfirst.frc3244.CMBA.RobotMap;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;
import edu.wpi.first.wpilibj.command.Scheduler;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton select;
    public JoystickButton start;
    public JoystickButton rB;
    public JoystickButton lB;
    public JoystickButton a;
    public JoystickButton b;
    public Joystick xbox0;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
    	
    // This Puts a indication on what Commands are currently scheduled
 	   SmartDashboard.putData(Scheduler.getInstance());
 	   
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        xbox0 = new Joystick(0);
        
        b = new JoystickButton(xbox0, 2);
        b.whileHeld(new ForksJogOpen());
        a = new JoystickButton(xbox0, 1);
        a.whileHeld(new ForksJogClose());
        lB = new JoystickButton(xbox0, 5);
        lB.whileHeld(new LiftJogDown());
        rB = new JoystickButton(xbox0, 6);
        rB.whileHeld(new LiftJogUp());
        start = new JoystickButton(xbox0, 8);
        start.whileHeld(new DriveSetSpeedFast());
        select = new JoystickButton(xbox0, 7);
        select.whenPressed(new DriveSetSpeedSlow());

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("CG_ Finally", new CG_Finally());

        SmartDashboard.putData("CG_ Prepare To Pick up", new CG_PrepareToPickup());

        SmartDashboard.putData("CG_ Stack Totes", new CG_StackTotes());

        SmartDashboard.putData("CG_ Pick Tote One", new CG_PickToteOne());

        SmartDashboard.putData("CG_ Set Tote On One", new CG_SetToteOnOne());

        SmartDashboard.putData("CG_ Grip N Pick Tote One", new CG_GripNPickToteOne());

        SmartDashboard.putData("CG_ Close Forks", new CG_CloseForks());

        SmartDashboard.putData("CG_ Open Forks", new CG_OpenForks());

        SmartDashboard.putData("Drive FPS", new DriveFPS());

        SmartDashboard.putData("Drive To Pick Tote", new DriveToPickTote());

        SmartDashboard.putData("Drive To Set Tote On One", new DriveToSetToteOnOne());

        SmartDashboard.putData("Drive Clear Of Tote", new DriveClearOfTote());

        SmartDashboard.putData("Drive Tank", new DriveTank());

        SmartDashboard.putData("Drive Set Speed Fast", new DriveSetSpeedFast());

        SmartDashboard.putData("Drive Set Speed Slow", new DriveSetSpeedSlow());

        SmartDashboard.putData("Lift Jog Up", new LiftJogUp());

        SmartDashboard.putData("Lift Jog Down", new LiftJogDown());

        SmartDashboard.putData("Lift To Top", new LiftToTop());

        SmartDashboard.putData("Lift To Bottom", new LiftToBottom());

        SmartDashboard.putData("Lift To Above One Tote", new LiftToAboveOneTote());

        SmartDashboard.putData("Lift To Set On One Tote", new LiftToSetOnOneTote());

        SmartDashboard.putData("Forks Jog Open", new ForksJogOpen());

        SmartDashboard.putData("Forks Jog Close", new ForksJogClose());

        SmartDashboard.putData("Forks Open", new ForksOpen());

        SmartDashboard.putData("Forks Close", new ForksClose());

        SmartDashboard.putData("Forks Relax Open", new ForksRelaxOpen());

        SmartDashboard.putData("Forks Relax Close", new ForksRelaxClose());

        SmartDashboard.putData("Drive Spin In Place", new DriveSpinInPlace(45));


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
       
        
        /**
         * Some Extra Smart Dash Board Data to display
         */
        
        SmartDashboard.putNumber("Dive to Tote Speed", .5);
        SmartDashboard.putNumber("Dive Clear Tote Speed", .5);
        SmartDashboard.putNumber("Forks Open Power", .5);
        SmartDashboard.putNumber("Forks Close Power", .5);
        SmartDashboard.putNumber("Drive Straight Correction",.2);
        //SmartDashboard.putNumber("Drive Spin",90);
        //SmartDashboard.putNumber("PDP Power Channel", RobotMap.pdp_MotorForks_Channel);
        //SmartDashboard.putNumber("Forks Power", Robot.forks.getCurrentPower());
        //SmartDashboard.putData("Gyro", RobotMap.driveSystemGyro);
        //SmartDashboard.putData("PDP",RobotMap.pdp);
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getXbox0() {
        return xbox0;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

