// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.CMBA.commands;

import java.util.LinkedList;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3244.CMBA.Robot;

/**
 *
 */
public class  ForksOpen extends Command {

    private static boolean sample_Power_Ons = false;
	private static double start_Power = 0;
	private static double scancount = 0;
	private static LinkedList<Double> fifo = null;
	private static double averageCurrent = 0;
	private static double kpower = 0;
	
	public ForksOpen() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.forks);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        setTimeout(10);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	kpower = SmartDashboard.getNumber("Forks Close Power");
    	SmartDashboard.putNumber("Forks Start Power", 0);
    	scancount=0;
    	fifo = new LinkedList<Double>();
    	fifo.clear();
    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	SmartDashboard.putNumber("Forks Time out",this.timeSinceInitialized());	
    	Robot.forks.jogOpen(kpower);
    	
    	if(this.timeSinceInitialized()>1){
    		if(fifo.size()>9){
    			double sum = 0;
    			for(int a = 0; a < fifo.size(); a++){
    				sum = sum + fifo.get(a);
    			}
    			averageCurrent = sum/fifo.size();
    			SmartDashboard.putNumber("Forks Average Power", averageCurrent);
    			fifo.removeFirst();
    		}
    		
    		fifo.add(new Double (Robot.forks.getCurrentPower()));
    		SmartDashboard.putNumber("Forks Current Power Double", fifo.getLast());
    		
    		if (!sample_Power_Ons && averageCurrent >0 ){															//Now Sample the Current
        		start_Power = averageCurrent;
        		sample_Power_Ons=true;
        		SmartDashboard.putNumber("Forks Start Power", start_Power);
        	}
    	}
    	if(sample_Power_Ons){
    		if(Robot.forks.getCurrentPower()>start_Power+.75){
    			scancount++;
    	    	SmartDashboard.putNumber("ScanCount", scancount);	
    		}else{
    			//scancount=0;
    		}
    	}	
    }
    
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	
        return isTimedOut()|| scancount>10;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.forks.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
