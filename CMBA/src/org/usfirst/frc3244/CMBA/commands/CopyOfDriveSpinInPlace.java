// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.CMBA.commands;

import java.util.LinkedList;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3244.CMBA.Robot;
import org.usfirst.frc3244.CMBA.RobotMap;

/**
 *
 */
public class  CopyOfDriveSpinInPlace extends Command {
	
	private static LinkedList<Double> fifo = null;
    private static double averagegyro = 0;
    private static boolean sample_gyro = false;
    private final double spin;
    private static double spinTarget = 0;
    
    public CopyOfDriveSpinInPlace(double s) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveSystem);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        spin = s;
    }

    
	// Called just before this Command runs the first time
    protected void initialize() {
    	
    	sample_gyro = false;
    	fifo = new LinkedList<Double>();
    	fifo.clear();	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	SmartDashboard.putNumber("new spin", spin);
    	SmartDashboard.putData("Gyro", RobotMap.driveSystemGyro);
    	SmartDashboard.putNumber("GY", Robot.driveSystem.getGyro());
    	if(fifo.size()>9){
    		double sum = 0;
    		for(int i =0;i<fifo.size();i++){
    			sum = sum + fifo.get(i);
    		}
    		averagegyro = sum/fifo.size();
    		fifo.removeFirst();
    		
    		if(!sample_gyro){
    			spinTarget = averagegyro + spin;
        		sample_gyro = true;
        		SmartDashboard.putNumber("Drive spinTarget", spinTarget);
        	}
    		
    		double kpSpeed = (spinTarget - averagegyro)/spinTarget;
    		SmartDashboard.putNumber("kpSpeed", kpSpeed);
    		double commandSpeed = 1*kpSpeed;
    		if (commandSpeed<.5)commandSpeed=.5;
    		if (commandSpeed>.5)commandSpeed=.5;
    		if(spin<0){commandSpeed = -commandSpeed;}
    		SmartDashboard.putNumber("Drive commandSpeed", commandSpeed);
    		Robot.driveSystem.tankDrive(commandSpeed, -commandSpeed);
    	}
    	fifo.add(new Double(Robot.driveSystem.getGyro()));
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return sample_gyro && averagegyro > spinTarget-10 && averagegyro < spinTarget+10;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveSystem.driveStraight(0,0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
