// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.TestMecanum;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import java.util.Vector;

import org.usfirst.frc3244.TestMecanum.RobotMap.RobotSetting;
import org.usfirst.frc3244.TestMecanum.subsystems.NordicSpeedController;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainLeftFrontDrive;
    public static SpeedController driveTrainLeftRearDrive;
    public static SpeedController driveTrainRightFrontDrive;
    public static SpeedController driveTrainRightRearDrive;
    public static AnalogGyro driveTrainGyro;
    public static Encoder driveTrainLeftRearEncoder;
    public static Encoder driveTrainRightRearEncoder;
    public static Encoder driveTrainLeftFrontEncoder;
    public static Encoder driveTrainRightFrontEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  
    //Start Code to use the NorticSpeedControler
    public enum RobotSetting {
		DRIVETRAIN_ENCODER_TO_360(1.0, 360.0/250.0),
		DRIVETRAIN_ROTATION_P_VALUE(0.04, 0.04), 
		MINIMAL_DRIVE_SPEED(0.1, 0.1);
	
		private final double m_competitionSetting;
		private final double m_practiceSetting;
		
		private final boolean isCompetitionBot = true;
		
		public double get() {
			return isCompetitionBot ? m_competitionSetting : m_practiceSetting; 
		}
		
	    RobotSetting(double competitionSetting, double practiceSetting) {
	    	m_competitionSetting = competitionSetting;
	    	m_practiceSetting = practiceSetting;
		}
	}
    
    public static RobotDrive driveTrainRobotDrive41;


    public static NordicSpeedController nordicLF = null;
    public static NordicSpeedController nordicLR = null;
    public static NordicSpeedController nordicRF = null;
    public static NordicSpeedController nordicRR = null;
    
    //End Code to use the NorticSpeedControler
    
    
    //Start*****************************************//
    //			I Added BuiltInAccelerometer        //
    //**********************************************//
    
    public static BuiltInAccelerometer driveSystemaccel;

    //End*******************************************//
    //			I Added BuiltInAccelerometer        //
    //**********************************************//
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftFrontDrive = new Talon(2);
        LiveWindow.addActuator("Drive Train", "Left Front Drive", (Talon) driveTrainLeftFrontDrive);
        
        driveTrainLeftRearDrive = new Talon(0);
        LiveWindow.addActuator("Drive Train", "Left Rear Drive", (Talon) driveTrainLeftRearDrive);
        
        driveTrainRightFrontDrive = new Talon(3);
        LiveWindow.addActuator("Drive Train", "Right Front Drive", (Talon) driveTrainRightFrontDrive);
        
        driveTrainRightRearDrive = new Talon(1);
        LiveWindow.addActuator("Drive Train", "Right Rear Drive", (Talon) driveTrainRightRearDrive);
        
        driveTrainGyro = new AnalogGyro(0);
        LiveWindow.addSensor("Drive Train", "Gyro", driveTrainGyro);
        driveTrainGyro.setSensitivity(0.007);
        driveTrainLeftRearEncoder = new Encoder(0, 1, true, EncodingType.k4X);
        LiveWindow.addSensor("Drive Train", "Left Rear Encoder", driveTrainLeftRearEncoder);
        driveTrainLeftRearEncoder.setDistancePerPulse(1.0);
        driveTrainLeftRearEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveTrainRightRearEncoder = new Encoder(2, 3, true, EncodingType.k4X);
        LiveWindow.addSensor("Drive Train", "Right Rear Encoder", driveTrainRightRearEncoder);
        driveTrainRightRearEncoder.setDistancePerPulse(1.0);
        driveTrainRightRearEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveTrainLeftFrontEncoder = new Encoder(4, 5, true, EncodingType.k4X);
        LiveWindow.addSensor("Drive Train", "Left Front Encoder", driveTrainLeftFrontEncoder);
        driveTrainLeftFrontEncoder.setDistancePerPulse(1.0);
        driveTrainLeftFrontEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveTrainRightFrontEncoder = new Encoder(6, 7, true, EncodingType.k4X);
        LiveWindow.addSensor("Drive Train", "Right Front Encoder", driveTrainRightFrontEncoder);
        driveTrainRightFrontEncoder.setDistancePerPulse(1.0);
        driveTrainRightFrontEncoder.setPIDSourceType(PIDSourceType.kRate);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
      //Start Code to use the NorticSpeedControler
        
        driveTrainLeftFrontEncoder.setDistancePerPulse(RobotSetting.DRIVETRAIN_ENCODER_TO_360.get());
        driveTrainRightFrontEncoder.setDistancePerPulse(RobotSetting.DRIVETRAIN_ENCODER_TO_360.get());
        driveTrainLeftRearEncoder.setDistancePerPulse(RobotSetting.DRIVETRAIN_ENCODER_TO_360.get());
        driveTrainRightRearEncoder.setDistancePerPulse(RobotSetting.DRIVETRAIN_ENCODER_TO_360.get());
        double p = 2.0;
        double i = 0.001;
        double d = 0;
        nordicLF = new NordicSpeedController(driveTrainLeftFrontDrive, driveTrainLeftFrontEncoder,p,i,d);
        nordicLR = new NordicSpeedController(driveTrainLeftRearDrive, driveTrainLeftRearEncoder,p,i,d);
        nordicRF = new NordicSpeedController(driveTrainRightFrontDrive, driveTrainRightFrontEncoder,p,i,d);
        nordicRR = new NordicSpeedController(driveTrainRightRearDrive, driveTrainRightRearEncoder,p,i,d);
        
        driveTrainRobotDrive41 = new RobotDrive(nordicLF, nordicLR, nordicRF, nordicRR);
        
        driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        //driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        //driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
          
        driveTrainRobotDrive41.setSafetyEnabled(true);
        driveTrainRobotDrive41.setExpiration(0.1);
        driveTrainRobotDrive41.setSensitivity(0.5);
        driveTrainRobotDrive41.setMaxOutput(1.0);
        
        
      //Start*****************************************//
        //			I Added BuiltInAccelerometer        //
        //**********************************************//
        
        driveSystemaccel = new BuiltInAccelerometer();
        LiveWindow.addSensor("Drive System", "accel",  driveSystemaccel);
        
        //End*******************************************//
        //			I Added BuiltInAccelerometer        //
        //**********************************************//
    }
}
