// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.SirAntsABot2;

import org.usfirst.frc3244.SirAntsABot2.subsystems.NordicSpeedController;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainMotor_Left_Front;
    public static SpeedController driveTrainMotor_Left_Rear;
    public static SpeedController driveTrainMotor_Right_Front;
    public static SpeedController driveTrainMotor_Right_Rear;
    public static AnalogGyro driveTrainRobot_Gyro;
    public static Encoder driveTrainEncoder_Left_Front;
    public static Encoder driveTrainEncoder_Left_Rear;
    public static Encoder driveTrainEncoder_Right_Front;
    public static Encoder driveTrainEncoder_Right_Rear;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
  //Start Code to use the NorticSpeedControler
    public enum RobotSetting {
    	DRIVETRAIN_ENCODER_TO_360(1.0, 360.0/250.0),
		DRIVETRAIN_ROTATION_P_VALUE(0.04, 0.04), 
		MINIMAL_DRIVE_SPEED(0.1, 0.1),
    	WRIST_STOW_POSITION(90,90),
    	WRIST_CAPTURE_POSITION(0,0),
    	SEALEGS_ENCODER_TO_360(1.0,1.0);
	
		private final double m_competitionSetting;
		private final double m_practiceSetting;
		
		private final boolean isCompetitionBot = true;
		
		public double get() {
			return isCompetitionBot ? m_competitionSetting : m_practiceSetting; 
		}
		
	    RobotSetting(double competitionSetting, double practiceSetting) {
	    	m_competitionSetting = competitionSetting;
	    	m_practiceSetting = practiceSetting;
		}
	}
    
    public static RobotDrive driveTrainRobotDrive41;


    public static NordicSpeedController nordicLF = null;
    public static NordicSpeedController nordicLR = null;
    public static NordicSpeedController nordicRF = null;
    public static NordicSpeedController nordicRR = null;
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainMotor_Left_Front = new Talon(0);
        LiveWindow.addActuator("DriveTrain", "Motor_Left_Front", (Talon) driveTrainMotor_Left_Front);
        
        driveTrainMotor_Left_Rear = new Talon(1);
        LiveWindow.addActuator("DriveTrain", "Motor_Left_Rear", (Talon) driveTrainMotor_Left_Rear);
        
        driveTrainMotor_Right_Front = new Talon(2);
        LiveWindow.addActuator("DriveTrain", "Motor_Right_Front", (Talon) driveTrainMotor_Right_Front);
        
        driveTrainMotor_Right_Rear = new Talon(3);
        LiveWindow.addActuator("DriveTrain", "Motor_Right_Rear", (Talon) driveTrainMotor_Right_Rear);
        
        driveTrainRobot_Gyro = new AnalogGyro(0);
        LiveWindow.addSensor("DriveTrain", "Robot_Gyro", driveTrainRobot_Gyro);
        driveTrainRobot_Gyro.setSensitivity(0.007);
        driveTrainEncoder_Left_Front = new Encoder(0, 1, true, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Encoder_Left_Front", driveTrainEncoder_Left_Front);
        driveTrainEncoder_Left_Front.setDistancePerPulse(1.0);
        driveTrainEncoder_Left_Front.setPIDSourceType(PIDSourceType.kRate);
        driveTrainEncoder_Left_Rear = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Encoder_Left_Rear", driveTrainEncoder_Left_Rear);
        driveTrainEncoder_Left_Rear.setDistancePerPulse(1.0);
        driveTrainEncoder_Left_Rear.setPIDSourceType(PIDSourceType.kRate);
        driveTrainEncoder_Right_Front = new Encoder(4, 5, true, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Encoder_Right_Front", driveTrainEncoder_Right_Front);
        driveTrainEncoder_Right_Front.setDistancePerPulse(1.0);
        driveTrainEncoder_Right_Front.setPIDSourceType(PIDSourceType.kRate);
        driveTrainEncoder_Right_Rear = new Encoder(6, 7, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Encoder_Right_Rear", driveTrainEncoder_Right_Rear);
        driveTrainEncoder_Right_Rear.setDistancePerPulse(1.0);
        driveTrainEncoder_Right_Rear.setPIDSourceType(PIDSourceType.kRate);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
