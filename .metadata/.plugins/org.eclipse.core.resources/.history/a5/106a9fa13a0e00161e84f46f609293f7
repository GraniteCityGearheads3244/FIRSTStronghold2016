// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.SirAntsABot.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3244.SirAntsABot.Robot;
import org.usfirst.frc3244.SirAntsABot.RobotMap;

/**
 *
 */
public class Drive_Robot_Orianted_Distance_Strafe extends Command {

	private boolean forward = true;
	private double max = 1;
	private double min = -1;
	private double deadband = .2;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_Distance;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Drive_Robot_Orianted_Distance_Strafe(double Distance) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_Distance = Distance;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
      
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.driveTrain.my_Reset_Left_Front_Encoder();
    	max = RobotMap.RobotDriveTrainSettings.MAX_DRIVE_SPEED.get();
    	min = RobotMap.RobotDriveTrainSettings.MAX_DRIVE_SPEED.get();
    	deadband = RobotMap.RobotDriveTrainSettings.DEADBAND.get();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    	double y_D = 0.0;
    	//X = Left/Right
		//y = Forward Back
    	//Power
    	double x = 1;	//0.5 the first time it worked
    	double y = 0.0;
    	double r = 0.0;
    	double gyro = 0 ;
    	
    	//Direction?
    	if(m_Distance<0){
    		forward=true;
    		y_D = 1;
    	}else{
    		forward=false;
    		y_D = -1;
    	}
    	
    	x = y_D * Robot.driveTrain.target(x,deadband,min,max);
    	y = Robot.driveTrain.target(y,deadband,min,max);
    	r = Robot.driveTrain.target(r,deadband,min,max);
    	
    	Robot.driveTrain.diagnostics(x, y, r, gyro);
    	
    	Robot.driveTrain.my_Auto_Drive_Mecanum_No_VelocityFactor(-x, -y, r, gyro);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return (forward && (Robot.driveTrain.my_Get_Left_Front_Encoder() < m_Distance)) || //or
        		(!forward && (Robot.driveTrain.my_Get_Left_Front_Encoder() > m_Distance));
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.my_Drive_Mecanum(0, 0, 0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
