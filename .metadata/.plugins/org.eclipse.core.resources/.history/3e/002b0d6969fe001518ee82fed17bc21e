// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.SirAntsABot;

import org.usfirst.frc3244.SirAntsABot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc3244.SirAntsABot.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton b_1;
    public JoystickButton x_1;
    public Joystick xbox_1;
    public JoystickButton y_2;
    public JoystickButton a_2;
    public JoystickButton start_2;
    public JoystickButton reset_2;
    public JoystickButton lB_2;
    public JoystickButton rB_2;
    public JoystickButton b_2;
    public JoystickButton x_2;
    public Joystick xbox_2;
    public JoystickButton toggleSwitch;
    public Joystick launchPad;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton a_1;
    public JoystickButton reset_1;
    public JoystickButton turboStick_1;
    public JoystickButton snailStick_1;
    public InternalButton ResetAllDriveEncoders;
    public JoystickButton referenceLeftSeaLeg;
    public JoystickButton referenceRightSeaLeg;
    public JoystickButton returnSeaLeg_to_TDC;
    public JoystickButton returnSeaLeg_to_Deploy;
    
    public JoystickButton Secure_Ball;
    public JoystickButton Soft_Release;
    public JoystickButton ScissorToClimb;
    public JoystickButton ScissorStartClimb;
    public JoystickButton ScissorToDefence;
    public JoystickButton ScissorToStow;
    	
    public OI() {
    	
    	ResetAllDriveEncoders = new InternalButton();
    	ResetAllDriveEncoders.whileHeld(new Drive_Reset_All_Encoders());
    	SmartDashboard.putData("Reset All Drive Encoders", ResetAllDriveEncoders);
    	//SmartDashboard.putNumber("Scissor_Target",13);
    	
    
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        launchPad = new Joystick(2);
        
        toggleSwitch = new JoystickButton(launchPad, 7);
        toggleSwitch.whileHeld(new Drive_Robot_Field_Oriented_Mecanum());
        xbox_2 = new Joystick(1);
        
        x_2 = new JoystickButton(xbox_2, 3);
        x_2.whileHeld(new Claw_To_Position(20));
        b_2 = new JoystickButton(xbox_2, 2);
        b_2.whileHeld(new Claw_To_Position(13.5));
        rB_2 = new JoystickButton(xbox_2, 6);
        rB_2.whileHeld(new Scissor_To_Position(RobotMap.SCISSOR_DEFENCE_POS));
        lB_2 = new JoystickButton(xbox_2, 5);
        lB_2.whileHeld(new Scissor_To_Position(RobotMap.SCISSOR_STOW_POS));
        reset_2 = new JoystickButton(xbox_2, 7);
        reset_2.whenPressed(new PinBall_Reset());
        start_2 = new JoystickButton(xbox_2, 8);
        start_2.whileHeld(new PinBall_Cycle());
        a_2 = new JoystickButton(xbox_2, 1);
        a_2.whileHeld(new Wrist_Jog_Down());
        y_2 = new JoystickButton(xbox_2, 4);
        y_2.whileHeld(new Wrist_Jog_Up());
        xbox_1 = new Joystick(0);
        
        x_1 = new JoystickButton(xbox_1, 3);
        x_1.whileHeld(new Claw_To_Position(20));
        b_1 = new JoystickButton(xbox_1, 2);
        b_1.whileHeld(new Claw_To_Position(13.5));

        a_1 = new JoystickButton(xbox_1, 1);
        a_1.whenPressed(new SeaLegs_Return_To_TDC());
        // SmartDashboard Buttons
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        //SmartDashboard.putData("Claw_To_Position: Open", new Claw_To_Position(20));
        //SmartDashboard.putData("Claw_To_Position: Closed", new Claw_To_Position(13.5));
        //SmartDashboard.putData("Claw_To_Position: ShootBall", new Claw_To_Position(15.5));
        //SmartDashboard.putData("Scissor_To_HMI", new Scissor_To_HMI());
        SmartDashboard.putData("Auto_Ready_Ball", new Auto_Ready_Ball());
        //SmartDashboard.putData("Auto_Cycle_Secure_Ball", new Auto_Cycle_Secure_Ball());
        //SmartDashboard.putData("Auto_00_ReachEdgeOfObstical", new Auto_00_ReachEdgeOfObstical());
        SmartDashboard.putData("Drive_Robot_Field_Oriented_Mecanum", new Drive_Robot_Field_Oriented_Mecanum());
        SmartDashboard.putData("Drive_Robot_Robot_Oriented_Mecanum", new Drive_Robot_Robot_Oriented_Mecanum());
        SmartDashboard.putData("PinBall_Reset", new PinBall_Reset());
        //SmartDashboard.putData("PinBall_Shoot", new PinBall_Shoot());
        //SmartDashboard.putData("PinBall_Cycle", new PinBall_Cycle());
        SmartDashboard.putData("PinBall_Controled_BackOFF", new PinBall_Controled_BackOFF());
        //SmartDashboard.putData("PinBall_Jog_Reverse", new PinBall_Jog_Reverse());
        
        SmartDashboard.putData("SeaLegs_Reference_Left", new SeaLegs_Reference_Left());
        SmartDashboard.putData("SeaLegs_Reference_Right", new SeaLegs_Reference_Right());
        SmartDashboard.putData("Wrist_To_Lower: Lower", new Wrist_To_Lower(1));
        SmartDashboard.putData("Wrist_To_Setpoint: Fouty_Five", new Wrist_To_Setpoint(45));
        SmartDashboard.putData("Wrist_To_Stow: Stow", new Wrist_To_Stow(RobotMap.WRIST_STOW_ANGLE));
        SmartDashboard.putData("Reset Gyro Heading To Current", new Drive_Gyro_FullReset());
        
        
        SmartDashboard.putData("Shoot", new Auto_Drive_UnderLowBar_test());
        
        
        start_2.whenReleased(new PinBall_Reset());
        turboStick_1 = new JoystickButton(xbox_1, 9);
        turboStick_1.whileHeld(new Drive_Turbo_NoTimeOut());
        snailStick_1 = new JoystickButton(xbox_1, 10);
        snailStick_1.whileHeld(new Drive_Snail_NoTimeOut());
        reset_1 = new JoystickButton(xbox_1, 7);
        reset_1.whenPressed(new SeaLegs_Return_To_TDC());
    	
        
        referenceLeftSeaLeg = new JoystickButton(launchPad, 8);
    	referenceLeftSeaLeg.whenReleased(new SeaLegs_Left_Reference_Cycle());
    	
    	
    	referenceRightSeaLeg = new JoystickButton(launchPad, 9);
    	referenceRightSeaLeg.whenReleased(new SeaLegs_Right_Reference_Cycle());
    	
    	returnSeaLeg_to_TDC = new JoystickButton(launchPad, 10);
    	returnSeaLeg_to_TDC.whileHeld(new SeaLegs_Return_To_TDC());
    	
    	returnSeaLeg_to_Deploy = new JoystickButton(launchPad, 11);
    	returnSeaLeg_to_Deploy.whileHeld(new SeaLegs_Deploy());
    	
    	Secure_Ball = new JoystickButton(launchPad, 1);
    	Secure_Ball.whenPressed(new Auto_Cycle_Secure_Ball());
    	
    	Soft_Release = new JoystickButton(launchPad, 2);
    	Soft_Release.whenPressed(new PinBall_Cycle_SOFT());
    	
    	ScissorToClimb = new JoystickButton(launchPad,3);
    	//ScissorToClimb.whileHeld(new Scissor_To_Position(RobotMap.SCISSOR_CLIMB_REACH_BAR));
    	ScissorToClimb.whenPressed(new Auto_Ready_Climb());
    	
    	ScissorStartClimb = new JoystickButton(launchPad,4);
    	ScissorStartClimb.whileHeld(new Scissor_To_Position(RobotMap.SCISSOR_CLIMB_LIFT_BOT));
    	
    	ScissorToDefence = new JoystickButton(launchPad,5);
    	ScissorToDefence.whenPressed(new Scissor_To_Position(RobotMap.SCISSOR_DEFENCE_POS));
    	
    	ScissorToStow = new JoystickButton(launchPad,6);
    	ScissorToStow.whileHeld(new Scissor_To_Position(RobotMap.SCISSOR_STOW_POS));
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getXbox_1() {
        return xbox_1;
    }

    public Joystick getXbox_2() {
        return xbox_2;
    }

    public Joystick getLaunchPad() {
        return launchPad;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

