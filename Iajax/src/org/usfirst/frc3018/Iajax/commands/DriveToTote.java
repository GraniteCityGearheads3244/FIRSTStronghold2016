// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3018.Iajax.commands;

import edu.wpi.first.wpilibj.command.PIDCommand;

import org.usfirst.frc3018.Iajax.Robot;
import org.usfirst.frc3018.Iajax.RobotMap;

/**
 *
 */
public class  DriveToTote extends PIDCommand {

    private double m_speed = -0.4;

	public DriveToTote() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("DriveToTote", 0.01, 0.0, 0.0, 0.005);
        getPIDController().setContinuous(false);
        getPIDController().setAbsoluteTolerance(0.2);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return RobotMap.driveTrainGyro1.pidGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
    	double offset = Robot.visionTracking.getAngleToTote()*Math.PI/180.0;
    	double direction = 0;
       	double x = Math.sin(direction) * m_speed;
    	double y = -Math.cos(direction) * m_speed;
     	//System.out.println("x="+x+"y="+y+"rot="+output+"angle="+0.0);
        Robot.driveTrain.mecanumDrive(-output, y, 0, 0.0);

    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	double angleToTote = Robot.visionTracking.getAngleToTote();
    	setSetpoint(RobotMap.driveTrainGyro1.getAngle() + angleToTote);
    	//System.out.println("Initial Setpoint="+getSetpoint());
    	getPIDController().enable();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	double angleToTote = Robot.visionTracking.getAngleToTote();
    	setSetpoint(RobotMap.driveTrainGyro1.getAngle() + angleToTote);
    	//System.out.println("update Setpoint="+getSetpoint());
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	//System.out.println("Top of tote is "+Robot.visionTracking.getTopRightOfToteY());
    	return Robot.visionTracking.getTopRightOfToteY() > 230.0;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.mecanumDrive(0.0, 0.0, 0.0, 0.0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
