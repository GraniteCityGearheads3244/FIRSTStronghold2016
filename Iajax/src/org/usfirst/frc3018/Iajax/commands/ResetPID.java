// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3018.Iajax.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3018.Iajax.Robot;
import org.usfirst.frc3018.Iajax.RobotMap;

/**
 *
 */
public class  ResetPID extends Command {
	double m_setpoint;

    public ResetPID() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
    	requires(Robot.driveTrain);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() { 
    	double pvalue = SmartDashboard.getNumber("PValue");
    	double ivalue = SmartDashboard.getNumber("IValue");
    	double dvalue = SmartDashboard.getNumber("DValue");
    	m_setpoint =SmartDashboard.getNumber("Setpoint");
    	
    	Robot.driveTrain.resetPIDs(pvalue, ivalue, dvalue, 0);
    	SmartDashboard.putBoolean("enabled", true);
    	System.out.println("Pvalue="+pvalue+" IValue="+ivalue+" DValue="+dvalue+" Setpoint="+m_setpoint);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	Robot.driveTrain.mecanumDrive(0, -m_setpoint, 0, 0);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        boolean isEnabled = SmartDashboard.getBoolean("enabled");
    	return !isEnabled;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
