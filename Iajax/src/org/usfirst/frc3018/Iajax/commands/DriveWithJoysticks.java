// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3018.Iajax.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc3018.Iajax.Robot;
import org.usfirst.frc3018.Iajax.RobotMap;

/**
 *
 */
public class  DriveWithJoysticks extends Command {

	private boolean m_trackAngle = false;
	private double m_lastAngle;

	public DriveWithJoysticks() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	m_trackAngle = false;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	double x= Robot.oi.getJoystick().getX();
    	double y=Robot.oi.getJoystick().getY();
    	double rotation=Robot.oi.getJoystick().getTwist();
    	double angle=RobotMap.driveTrainGyro1.getAngle();
    	double magnitude=Robot.oi.getJoystick().getMagnitude();
    	double direction=Robot.oi.getJoystick().getDirectionRadians();
    	double throttle = Robot.oi.getJoystick().getThrottle();
    	throttle = (-1 * throttle + 1) / 2.0;
    	double minSpeed = RobotMap.RobotSetting.MINIMAL_DRIVE_SPEED.get();
    	throttle = minSpeed + (1.0 - minSpeed) * throttle;
    	System.out.println("X=" + x + " Y="+y);
    	double scaledMagnitude = throttle * magnitude;
    	double newX = Math.sin(direction) * scaledMagnitude;
    	double newY = -Math.cos(direction) * scaledMagnitude;
    	
    	if(Math.abs(x) < 0.25){
    		newX = 0;
    	}
    	
    	if(Math.abs(y) < 0.25){
    		newY = 0;
    	}
    	
    	if(Math.abs(rotation) < 0.25){
    		rotation = 0;
    	}
    	
    	
    	double rot = throttle * rotation;
    	if(rot != 0 || newX==0 && newY==0 && rot==0) {
    		m_trackAngle = false;
    	}
    	else
    	{
    		if(!m_trackAngle) {
    			m_trackAngle = true;
    			m_lastAngle = angle;
    	    }
    	}
    	
    	if(m_trackAngle) {
    	    double errVal = angle - m_lastAngle;
    	    double myPValue =RobotMap.RobotSetting.DRIVETRAIN_ROTATION_P_VALUE.get();
    	    rot = -myPValue * errVal;
    	}
    	if(Robot.oi.getJoystick().getRawButton(2)){
    		angle = 0.0;
    	}
    	
    	//System.out.println("x="+newX+"y="+newY+"rot="+rotation+"angle="+angle);
    	Robot.driveTrain.mecanumDrive(newX, newY, rot, angle);
    	
    	
    	
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	m_trackAngle=false;
    }
}
