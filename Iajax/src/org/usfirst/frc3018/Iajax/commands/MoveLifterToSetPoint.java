

package org.usfirst.frc3018.Iajax.commands;

import edu.wpi.first.wpilibj.command.PIDCommand;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3018.Iajax.Robot;
import org.usfirst.frc3018.Iajax.RobotMap;
import org.usfirst.frc3018.Iajax.subsystems.Lifter;

/**
 *
 */
public class  MoveLifterToSetPoint extends PIDCommand {
 
	double m_setPoint;
	private boolean m_isFinished=false;
	static public double m_P = 0.004;
	static public double m_I = 0;
	static public double m_D = 0.005;
	
    public MoveLifterToSetPoint(double setPoint, double P, double I, double D) {
        super("MoveLifterToSetPoint", P,I,D, 0.005);
        m_P = P;
    	m_I = I;
    	m_D = D;

        getPIDController().setContinuous(false);
        getPIDController().setAbsoluteTolerance(5);
        getPIDController().setOutputRange(-0.5, 0.5);


        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.lifter);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        m_setPoint = setPoint;
    	SmartDashboard.putNumber("liftPos P", m_P);
    	SmartDashboard.putNumber("liftPos I", m_I);
    	SmartDashboard.putNumber("liftPos D", m_D);
    	SmartDashboard.putNumber("LiftPos Setpoint", m_setPoint);
    }
    
    public MoveLifterToSetPoint() {
    	this(0.0);   	
    }
    
    public MoveLifterToSetPoint(double setpoint) {
    	this(setpoint,m_P, m_I, m_D);   	
    }
    
    public MoveLifterToSetPoint(Lifter.LiftPosition pos) {
    	this(pos.getSetpoint());
    }
    protected double returnPIDInput() {
      return Robot.lifter.getHeight();
    }

    protected void usePIDOutput(double output) {
       Robot.lifter.raiseLifter(output);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
        if(m_setPoint>Lifter.LiftPosition.MAX_ALLOWED.getSetpoint()) {
        	m_setPoint=Lifter.LiftPosition.MAX_ALLOWED.getSetpoint();
        }
    	if(m_setPoint==0 && Robot.lifter.getHeight()>30){
    		ResetLifter zeroCommand=new ResetLifter();
    		zeroCommand.start();
    	}
    	if(m_setPoint>10)
    	{
    	    setSetpoint(m_setPoint);
    	    m_isFinished=false;
    	} else {
    		m_isFinished=true;
    	}
    
       	//System.out.println("moveLifterToSetpoint Starting");
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	//System.out.println("checking Lifter endcondition "+Math.abs(Robot.oi.getLeftJoystick().getY()) + " "+Robot.oi.getLeftJoystick().getY());
    	return m_isFinished || Math.abs(Robot.oi.getLeftJoystick().getY())>0.25;
    	//return m_isFinished || Math.abs(Robot.oi.getRightJoystick().getRawAxis(6))>0.25;
    }

    // Called once after isFinished returns true
    protected void end() {
    	//System.out.println("moveLifterToSetpoint Ending");
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }



	public void setNewSetpoint(double height) {
		m_setPoint=height;
	}
}
