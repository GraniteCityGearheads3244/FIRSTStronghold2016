// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3018.Iajax.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc3018.Iajax.Robot;
import org.usfirst.frc3018.Iajax.subsystems.Tipper;
import org.usfirst.frc3018.Iajax.subsystems.Tipper.TipPosition;

/**
 *
 */
public class  MoveTipperToSetpoint extends Command {

	double m_setpoint;
	boolean m_returnOnTarget;

    public MoveTipperToSetpoint(double setpoint, boolean returnOnTarget) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.tipper);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        m_setpoint = setpoint;
        m_returnOnTarget = returnOnTarget;
    }
    
    public MoveTipperToSetpoint(Tipper.TipPosition pos) {
    	this(pos, false);
    }
    
    public MoveTipperToSetpoint() {
    	this(Tipper.TipPosition.DRIVE_POSITION);
    }

    public MoveTipperToSetpoint(TipPosition pos, boolean returnOnTarget) {
		this(pos.getSetpoint(),returnOnTarget);
	}

	// Called just before this Command runs the first time
    protected void initialize() {
    	double setpoint=m_setpoint;
    	if(m_setpoint==Tipper.TipPosition.CURRENT_POSITION.getSetpoint()){
    		setpoint=Robot.tipper.getPosition();
    	}
    	Robot.tipper.setSetpoint(setpoint);
    	Robot.tipper.enable();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	if (m_returnOnTarget) {
    		Robot.tipper.onTarget();
    	}
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.tipper.disable();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
