// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3018.Iajax.commands;

import edu.wpi.first.wpilibj.command.PIDCommand;
import org.usfirst.frc3018.Iajax.Robot;
import org.usfirst.frc3018.Iajax.RobotMap;

/**
 *
 */
public class  PIDRotateToAngle extends PIDCommand {

    private double m_angle;
	private int m_numOnTarget;

	public PIDRotateToAngle(double angle) {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("PIDRotateToAngle", 0.01, 1.0E-4, 0.0, 0.005);
        getPIDController().setContinuous(false);
        getPIDController().setAbsoluteTolerance(1.0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        m_angle=angle;
    }
    
    public PIDRotateToAngle() {
    	this(-10.0);  
    }

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return RobotMap.driveTrainGyro1.pidGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

      Robot.driveTrain.mecanumDrive(0, 0, output, 0);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	double i = 0;
    	double p = 0.01;
    	if(Math.abs(m_angle) < 30){
    		i = 1e-4;
    		p = 0.03;
    	}
    	getPIDController().setPID(p, i, 0);
    	getPIDController().reset();
    	setSetpoint(RobotMap.driveTrainGyro1.getAngle()+m_angle);
    	getPIDController().enable();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        boolean onTarget = getPIDController().onTarget();
        if(!onTarget){
        	m_numOnTarget = 0;
        } else {
        	m_numOnTarget++;
        	if(m_numOnTarget > 14){
        		return true;
        	}
        }
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
        Robot.driveTrain.mecanumDrive(0, 0, 0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        Robot.driveTrain.mecanumDrive(0, 0, 0, 0);
    }
}
