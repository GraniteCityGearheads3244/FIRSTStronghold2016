// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3018.Iajax.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc3018.Iajax.Robot;
import org.usfirst.frc3018.Iajax.RobotMap;

/**
 *
 */
public class  DriveForTime extends Command {
	
	double m_time;
	double m_speed;
	double m_direction;
	double m_rotation;
	boolean m_useGyro;
	boolean m_trackAngle;
	double m_lastAngle;

    public DriveForTime(double speed, double direction, double rotation, boolean useGyro, double time) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
        m_time = time;
        m_speed = speed;
        m_direction = Math.PI * direction / 180.0;
        m_rotation = rotation;
        m_useGyro = useGyro;
    }
    
    public DriveForTime() {
      this(0.5, 0, 0.0, false, 3.0);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	setTimeout(m_time);
    	m_trackAngle = false;

    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	double x = Math.sin(m_direction) * m_speed;
    	double y = -Math.cos(m_direction) * m_speed;
    	double gyroAngle = RobotMap.driveTrainGyro1.getAngle();
    	double sendGyro=0;
    	if(m_useGyro){
    		sendGyro = gyroAngle;    		
    	}
    	if(m_rotation!=0) {
    		m_trackAngle=false;
    	}
    	else
    	{
    		if(!m_trackAngle) {
    			m_trackAngle=true;
    			m_lastAngle=gyroAngle;
    	    }
    	}
    	double rotation=m_rotation;
    	if(m_trackAngle) {
    	    double errVal=gyroAngle-m_lastAngle;
    	    double myPValue=0.02;
    	    rotation=-myPValue * errVal;
    	}
    	Robot.driveTrain.mecanumDrive(x, y, rotation, sendGyro);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	return isTimedOut();
        
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
