// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3018.Iajax;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.networktables2.type.NumberArray;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3018.Iajax.commands.*;
import org.usfirst.frc3018.Iajax.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    double pValue=1;
    double iValue=0;
    double dValue=0;
    double setValue=0;
    static String m_autoScript = "PinchToContainer( );MoveForks(600);DriveForTime(0.4,180,0,F,2.1);DriveForTime(0,0,0.2,F,2)";

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Catcher catcher;
    public static DriveTrain driveTrain;
    public static Dummy dummy;
    public static Lifter lifter;;
    public static Pincher pincher;;
    public static Tipper tipper;;
    public static VisionTracking visionTracking;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
        	
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        catcher = new Catcher();
        driveTrain = new DriveTrain();
        dummy = new Dummy();
        lifter = new Lifter();
        pincher = new Pincher();
        tipper = new Tipper();
        visionTracking = new VisionTracking();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands 
        //(which it very likely will), subsystems are not guaranteed to be 
        // constructed yet. Thus, their requires() statements may grab null 
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putNumber("PValue", pValue);
        SmartDashboard.putNumber("IValue", iValue);
        SmartDashboard.putNumber("DValue", dValue);
        SmartDashboard.putNumber("Setpoint", setValue);
        SmartDashboard.putBoolean("enabled", false);
        
        SmartDashboard.putString("Autonomous Script", m_autoScript);
        
    	SmartDashboard.putNumber("liftPos P", MoveLifterToSetPoint.m_P);
    	SmartDashboard.putNumber("liftPos I", MoveLifterToSetPoint.m_I);
    	SmartDashboard.putNumber("liftPos D", MoveLifterToSetPoint.m_D);
    	SmartDashboard.putNumber("LiftPos Setpoint", 0.0);
        
        driveTrain.zeroHeading(true);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
        updateStatus();
        diablePIDs();
        //visionTracking.test();
        checkAutonomousCommand();
        //System.out.println("COG_X "+visionTracking.getCenterOfToteX());
    }

    private void diablePIDs() {
    	driveTrain.disablePIDs();
    	tipper.disablePIDs();
    	lifter.disablePIDs();
    	pincher.disablePIDs();
    	catcher.disablePIDs();

	}
    public static String getAutoScript(){
    	return m_autoScript;
    }
	private void checkAutonomousCommand() {
		String script = SmartDashboard.getString("Autonomous Script"); 
		if(script == m_autoScript){
			return;
		}
		
		System.out.println("got new script \""+ script + "\"");
		m_autoScript = script;
		autonomousCommand=new AutonomousCommand(m_autoScript);
		
	}

	public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        
        //-driveTrain.zeroHeading(false);
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        updateStatus();
        visionTracking.updateStatus();
        //visionTracking.test();
        //System.out.println("COG_X "+visionTracking.getCenterOfToteX());
    }
    
    

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
    
    private void updateStatus(){
        driveTrain.updateStatus();
        lifter.updateStatus();
        pincher.updateStatus();
        tipper.updateStatus();
    }
}
