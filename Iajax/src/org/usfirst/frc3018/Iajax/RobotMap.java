// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3018.Iajax;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import java.util.Vector;

import org.usfirst.frc3018.Iajax.subsystems.NordicSpeedController;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController catcherCatcherMotor;
    public static AnalogGyro driveTrainGyro1;
    public static SpeedController driveTrainLR;
    public static SpeedController driveTrainLF;
    public static SpeedController driveTrainRF;
    public static SpeedController driveTrainRR;
    public static Encoder driveTrainLREncoder;
    public static Encoder driveTrainLFEncoder;
    public static Encoder driveTrainRFEncoder;
    public static Encoder driveTrainRREncoder;
    public static SpeedController dummySpeedController1;
    public static SpeedController lifterLifterMotor;
    public static Encoder lifterLiftEncoder;
    public static AnalogPotentiometer lifterLifterPot;
    public static SpeedController pincherPincherMotor;
    public static AnalogPotentiometer pincherPincherPot;
    public static SpeedController tipperTipperMotor;
    public static AnalogPotentiometer tipperTipperPot;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public enum RobotSetting {
		DRIVETRAIN_ENCODER_TO_360(1.0, 360.0/250.0),
		LIFTER_ENCODER_TO_250(1.0, 250.0/360.0),
		DRIVETRAIN_ROTATION_P_VALUE(0.04, 0.04), 
		MINIMAL_DRIVE_SPEED(0.1, 0.1),
		TIPPER_VERTICLE(0.730,0.582),
		TIPPER_BACK(0.516, 0.599), 
		TIPPER_PID_DIRECTION(1,-1);
	
		private final double m_competitionSetting;
		private final double m_practiceSetting;
		
		private final boolean isCompetitionBot = true;
		
		public double get() {
			return isCompetitionBot ? m_competitionSetting : m_practiceSetting; 
		}
		
	    RobotSetting(double competitionSetting, double practiceSetting) {
	    	m_competitionSetting = competitionSetting;
	    	m_practiceSetting = practiceSetting;
		}
	}

    public static RobotDrive driveTrainRobotDrive41;


    public static NordicSpeedController nordicLR = null;
    public static NordicSpeedController nordicLF = null;
    public static NordicSpeedController nordicRF = null;
    public static NordicSpeedController nordicRR = null;
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        catcherCatcherMotor = new Talon(5);
        LiveWindow.addActuator("Catcher", "CatcherMotor", (Talon) catcherCatcherMotor);
        
        driveTrainGyro1 = new AnalogGyro(0);
        LiveWindow.addSensor("DriveTrain", "Gyro 1", driveTrainGyro1);
        driveTrainGyro1.setSensitivity(0.007);
        driveTrainLR = new Talon(0);
        LiveWindow.addActuator("DriveTrain", "LR", (Talon) driveTrainLR);
        
        driveTrainLF = new Talon(1);
        LiveWindow.addActuator("DriveTrain", "LF", (Talon) driveTrainLF);
        
        driveTrainRF = new Talon(2);
        LiveWindow.addActuator("DriveTrain", "RF", (Talon) driveTrainRF);
        
        driveTrainRR = new Talon(3);
        LiveWindow.addActuator("DriveTrain", "RR", (Talon) driveTrainRR);
        
        driveTrainLREncoder = new Encoder(6, 7, true, EncodingType.k2X);
        LiveWindow.addSensor("DriveTrain", "LREncoder", driveTrainLREncoder);
        driveTrainLREncoder.setDistancePerPulse(1.0);
        driveTrainLREncoder.setPIDSourceType(PIDSourceType.kRate);
        driveTrainLFEncoder = new Encoder(2, 3, true, EncodingType.k2X);
        LiveWindow.addSensor("DriveTrain", "LFEncoder", driveTrainLFEncoder);
        driveTrainLFEncoder.setDistancePerPulse(1.0);
        driveTrainLFEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveTrainRFEncoder = new Encoder(4, 5, true, EncodingType.k2X);
        LiveWindow.addSensor("DriveTrain", "RFEncoder", driveTrainRFEncoder);
        driveTrainRFEncoder.setDistancePerPulse(1.0);
        driveTrainRFEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveTrainRREncoder = new Encoder(0, 1, true, EncodingType.k2X);
        LiveWindow.addSensor("DriveTrain", "RREncoder", driveTrainRREncoder);
        driveTrainRREncoder.setDistancePerPulse(1.0);
        driveTrainRREncoder.setPIDSourceType(PIDSourceType.kRate);
        dummySpeedController1 = new Talon(19);
        LiveWindow.addActuator("Dummy", "Speed Controller 1", (Talon) dummySpeedController1);
        
        lifterLifterMotor = new Talon(7);
        LiveWindow.addActuator("Lifter", "LifterMotor", (Talon) lifterLifterMotor);
        
        lifterLiftEncoder = new Encoder(8, 9, false, EncodingType.k2X);
        LiveWindow.addSensor("Lifter", "LiftEncoder", lifterLiftEncoder);
        lifterLiftEncoder.setDistancePerPulse(1.0);
        lifterLiftEncoder.setPIDSourceType(PIDSourceType.kRate);
        lifterLifterPot = new AnalogPotentiometer(2, 1.0, 0.0);
        LiveWindow.addSensor("Lifter", "LifterPot", lifterLifterPot);
        
        pincherPincherMotor = new Talon(6);
        LiveWindow.addActuator("Pincher", "PincherMotor", (Talon) pincherPincherMotor);
        
        pincherPincherPot = new AnalogPotentiometer(1, 1.0, 0.0);
        LiveWindow.addSensor("Pincher", "PincherPot", pincherPincherPot);
        
        tipperTipperMotor = new Victor(4);
        LiveWindow.addActuator("Tipper", "TipperMotor", (Victor) tipperTipperMotor);
        
        tipperTipperPot = new AnalogPotentiometer(3, 1.0, 0.0);
        LiveWindow.addSensor("Tipper", "TipperPot", tipperTipperPot);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        
       
        driveTrainLFEncoder.setDistancePerPulse(RobotSetting.DRIVETRAIN_ENCODER_TO_360.get());    
        driveTrainLREncoder.setDistancePerPulse(RobotSetting.DRIVETRAIN_ENCODER_TO_360.get());
        lifterLiftEncoder.setDistancePerPulse(RobotSetting.LIFTER_ENCODER_TO_250.get());

        nordicLR = new NordicSpeedController(driveTrainLR, driveTrainLREncoder);
        nordicLF = new NordicSpeedController(driveTrainLF, driveTrainLFEncoder);
        nordicRF = new NordicSpeedController(driveTrainRF, driveTrainRFEncoder);
        nordicRR = new NordicSpeedController(driveTrainRR, driveTrainRREncoder);
        
        driveTrainRobotDrive41 = new RobotDrive(nordicLF, nordicLR,
                nordicRF, nordicRR);
        
        driveTrainRobotDrive41.setSafetyEnabled(true);
        driveTrainRobotDrive41.setExpiration(0.1);
        driveTrainRobotDrive41.setSensitivity(0.5);
        driveTrainRobotDrive41.setMaxOutput(1.0);

        driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
       
    }
}
