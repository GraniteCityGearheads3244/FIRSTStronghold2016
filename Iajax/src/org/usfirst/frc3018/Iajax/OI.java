// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3018.Iajax;

import org.usfirst.frc3018.Iajax.commands.*;
import org.usfirst.frc3018.Iajax.subsystems.Pincher;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton triggerButton;
    public JoystickButton button7;
    public JoystickButton button9;
    public JoystickButton button11;
    public JoystickButton button5;
    public JoystickButton button6;
    public JoystickButton button4;
    public JoystickButton button8;
    public JoystickButton button10;
    public JoystickButton button12;
    public Joystick rightJoystick;
    public JoystickButton lButton4;
    public JoystickButton lButton3;
    public JoystickButton lButton5;
    public JoystickButton lButton2;
    public JoystickButton lButton6;
    public JoystickButton lButton7;
    public JoystickButton lButton11;
    public JoystickButton lButton10;
    public JoystickButton lButton8;
    public JoystickButton lButton9;
    public Joystick leftJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        leftJoystick = new Joystick(1);
        
        lButton9 = new JoystickButton(leftJoystick, 9);
        lButton9.whenPressed(new PrepareToLeaveChute());
        lButton8 = new JoystickButton(leftJoystick, 8);
        lButton8.whenPressed(new AdvanceCrates());
        lButton10 = new JoystickButton(leftJoystick, 10);
        lButton10.whenPressed(new PrepareToCatchNextCrate());
        lButton11 = new JoystickButton(leftJoystick, 11);
        lButton11.whenPressed(new TipForCatch());
        lButton7 = new JoystickButton(leftJoystick, 7);
        lButton7.whenPressed(new PlaceFirstToteAtChute());
        lButton6 = new JoystickButton(leftJoystick, 6);
        lButton6.whenPressed(new AlignToCatch());
        lButton2 = new JoystickButton(leftJoystick, 2);
        lButton2.whenPressed(new PlaceStackOnStep());
        lButton5 = new JoystickButton(leftJoystick, 5);
        lButton5.whenPressed(new PlaceStackOnToteOnStep());
        lButton3 = new JoystickButton(leftJoystick, 3);
        lButton3.whenPressed(new PrepareToPlaceOnToteOnStep());
        lButton4 = new JoystickButton(leftJoystick, 4);
        lButton4.whenPressed(new PrepareToPlaceOnStep());
        rightJoystick = new Joystick(0);
        
        button12 = new JoystickButton(rightJoystick, 12);
        button12.whenPressed(new PinchWideOpen());
        button10 = new JoystickButton(rightJoystick, 10);
        button10.whenPressed(new PinchToHoldContainer());
        button8 = new JoystickButton(rightJoystick, 8);
        button8.whenPressed(new PinchToTote());
        button4 = new JoystickButton(rightJoystick, 4);
        button4.whenPressed(new AdvanceCratesOnGround());
        button6 = new JoystickButton(rightJoystick, 6);
        button6.whenPressed(new LiftFromGround());
        button5 = new JoystickButton(rightJoystick, 5);
        button5.whenPressed(new MoveForksToGroundPickup());
        button11 = new JoystickButton(rightJoystick, 11);
        button11.whenPressed(new TipBack());
        button9 = new JoystickButton(rightJoystick, 9);
        button9.whenPressed(new TipToCatchPosition());
        button7 = new JoystickButton(rightJoystick, 7);
        button7.whenPressed(new TipForward());
        triggerButton = new JoystickButton(rightJoystick, 1);
        triggerButton.whenPressed(new PlaceStackOnPlatform());

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("ResetPID", new ResetPID());

        SmartDashboard.putData("DriveForTime", new DriveForTime());

        SmartDashboard.putData("RotateToAngle", new RotateToAngle());

        SmartDashboard.putData("DriveToDistance", new DriveToDistance());

        SmartDashboard.putData("TestGroup", new TestGroup());

        SmartDashboard.putData("PIDDriveToDistance", new PIDDriveToDistance());

        SmartDashboard.putData("PIDRotateToAngle", new PIDRotateToAngle());

        SmartDashboard.putData("RotateForTime", new RotateForTime());

        SmartDashboard.putData("TipBack", new TipBack());

        SmartDashboard.putData("LowerLifter", new LowerLifter());

        SmartDashboard.putData("RaseLifter", new RaseLifter());

        SmartDashboard.putData("OpenPinchers", new OpenPinchers());

        SmartDashboard.putData("ClosePinchers", new ClosePinchers());

        SmartDashboard.putData("TipForward", new TipForward());

        SmartDashboard.putData("ExtendCatcher", new ExtendCatcher());

        SmartDashboard.putData("RetractCatcher", new RetractCatcher());

        SmartDashboard.putData("PrepareTOCatchFirtCrate", new PrepareTOCatchFirtCrate());

        SmartDashboard.putData("PrepareToCatchNextCrate", new PrepareToCatchNextCrate());

        SmartDashboard.putData("AdvanceCrates", new AdvanceCrates());

        SmartDashboard.putData("DiliverCrates", new DiliverCrates());

        SmartDashboard.putData("MoveTipperToSetpoint", new MoveTipperToSetpoint());

        SmartDashboard.putData("MovePincherToSetpoint", new MovePincherToSetpoint());

        SmartDashboard.putData("MoveForks", new MoveForks());

        SmartDashboard.putData("AdvanceCratesOnGround", new AdvanceCratesOnGround());

        SmartDashboard.putData("LiftFromGround", new LiftFromGround());

        SmartDashboard.putData("MoveForksToGroundPickup", new MoveForksToGroundPickup());

        SmartDashboard.putData("PlaceStackOnStep", new PlaceStackOnStep());

        SmartDashboard.putData("LiftStackForPlaceOnStep", new LiftStackForPlaceOnStep());

        SmartDashboard.putData("PlaceStackOnPlatform", new PlaceStackOnPlatform());

        SmartDashboard.putData("PlaceStackOnToteOnStep", new PlaceStackOnToteOnStep());

        SmartDashboard.putData("PrepareToPlaceOnToteOnStep", new PrepareToPlaceOnToteOnStep());

        SmartDashboard.putData("PrepareToPlaceOnStep", new PrepareToPlaceOnStep());

        SmartDashboard.putData("TipToCatchPosition", new TipToCatchPosition());

        SmartDashboard.putData("ControllPincherWithJoystick", new ControllPincherWithJoystick());

        SmartDashboard.putData("ControllLifterWithJoysticks", new ControllLifterWithJoysticks());

        SmartDashboard.putData("PinchToHoldContainer", new PinchToHoldContainer());

        SmartDashboard.putData("AutonomousCommand", new AutonomousCommand());

        SmartDashboard.putData("resetLiftPID", new resetLiftPID());

        SmartDashboard.putData("DriveToAngle", new DriveToAngle());

        SmartDashboard.putData("DriveToTote", new DriveToTote());

        SmartDashboard.putData("AlignWithTote", new AlignWithTote());

        SmartDashboard.putData("SandLifter", new SandLifter());

        SmartDashboard.putData("ResetLifter", new ResetLifter());

        SmartDashboard.putData("TuneLifterPos", new TuneLifterPos());

        SmartDashboard.putData("PinchToTote", new PinchToTote());

        SmartDashboard.putData("PinchWideOpen", new PinchWideOpen());

        SmartDashboard.putData("AlignToCatch", new AlignToCatch());

        SmartDashboard.putData("TipForCatch", new TipForCatch());

        SmartDashboard.putData("PrepareToLeaveChute", new PrepareToLeaveChute());

        SmartDashboard.putData("PlaceFirstToteAtChute", new PlaceFirstToteAtChute());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getRightJoystick() {
        return rightJoystick;
    }

    public Joystick getLeftJoystick() {
        return leftJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick(){
    	return getRightJoystick();
    }
}
