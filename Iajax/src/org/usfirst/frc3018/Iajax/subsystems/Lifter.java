// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3018.Iajax.subsystems;

import org.usfirst.frc3018.Iajax.RobotMap;
import org.usfirst.frc3018.Iajax.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class Lifter extends PIDSubsystem {
	double m_currentOutput = 0;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController lifterMotor = RobotMap.lifterLifterMotor;
    Encoder liftEncoder = RobotMap.lifterLiftEncoder;
    AnalogPotentiometer lifterPot = RobotMap.lifterLifterPot;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public enum LiftPosition {
		ZERO_POSITION(0.0),
		LIFT_FROM_CATCHER(80.0),
		LIFT_FROM_GROUND(0),
		LIFT_FROM_STEP(186.0),
		CARRY_LOAD_TOTE_FROM_CATCHER(680.0),
		CARRY_WHILE_DRIVING(74.0),
		CARRY_FOR_STACK_WHILE_DRIVING(450.0),
		PLACE_ON_STEP(225.0),
		RELEASE_ON_STEP(125.0),
		PLACE_ON_TOTE_ON_STEP(520.0),
		RELEASE_ON_TOTE_ON_STEP(390.0),
		PLACE_ON_TOTE_ON_GROUND(400.0),
		RELEASE_ON_TOTE_ON_GROUND(295.0),
		RELEASE_ON_GROUND(0.0),
		RELEASE_ON_PLATFORM(0.0),
		TOTE_TOP_ON_CATCHER(105.0),
		TOTE_TOP_ON_GROUND(65.0),
		TOTE_TOP_ON_STEP(220.0),
		TOTE_TOP_ON_PLATFORM(120.0),
		PLACE_ON_TOTE_ON_CATCHER(445.0),
		MAX_ALLOWED(680),
		VIEW_ALIGNMENT(360.0), 
		CATCH_FROM_CHUTE(75);
		
		private final double m_setpoint;
		
		public double getSetpoint() {
			return m_setpoint;
		}
		
	    LiftPosition(double setpoint) {
			m_setpoint = setpoint;
		}
	}
	
    // Initialize your subsystem here
    public Lifter() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("Lifter", 5.0E-4, 0.0, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("Lifter", "PIDSubsystem Controller", getPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        //liftEncoder.setSamplesToAverage(50);
        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
        SmartDashboard.putNumber("lift P" , getPIDController().getP());
        SmartDashboard.putNumber("lift I" , getPIDController().getI());
        SmartDashboard.putNumber("lift D" , getPIDController().getD());
        SmartDashboard.putNumber("lift Setpoint" , getPIDController().getD());
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new ControllLifterWithJoysticks());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return liftEncoder.pidGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }
    
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
    	//if (getPIDController().getSetpoint() < 0){
    		//output = output / 2.0;
    	//}
    	m_currentOutput += output;
    	m_currentOutput = Math.min(m_currentOutput, 1.0);
    	m_currentOutput = Math.max(m_currentOutput, -1.0);
    	output = m_currentOutput;
    	output *= -1.0;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        lifterMotor.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }

	public void raiseLifterManual(double d) {
		disablePIDs();
		
		lifterMotor.set(-d);
	}
	
	public void raiseLifter(double d){
		setSetpoint(d * 1000.0);
		enable();
	}

	public void disablePIDs() {
		getPIDController().reset();
		m_currentOutput = 0;
	}
	
	public double getHeight(){
		double slope=634/(0.900-0.109);
		double potVal=lifterPot.get();
		
		return slope*(potVal-0.109);
	}
	
	public void updateStatus() {
        SmartDashboard.putNumber("Lift Rate", returnPIDInput());
        SmartDashboard.putNumber("Lift Distance" , liftEncoder.getDistance());
        SmartDashboard.putNumber("Lift Pot" , lifterPot.get());
        SmartDashboard.putNumber("Lift Height" , getHeight());
        SmartDashboard.putNumber("Lift Motor" , lifterMotor.get());
       SmartDashboard.putNumber("using lift Setpoint" , getPIDController().getSetpoint());
       SmartDashboard.putNumber("using lift P" , getPIDController().getP());
       SmartDashboard.putNumber("using lift I" , getPIDController().getI());
       SmartDashboard.putNumber("using lift D" , getPIDController().getD());
	}
	
	public void resetPID(double pvalue, double ivalue, double dvalue, double setpoint){
		disable();
		m_currentOutput = 0;
		getPIDController().setPID(pvalue, ivalue, dvalue);
		setSetpoint(setpoint);
		getPIDController().reset();
		enable();
	}

	public void lifterAtBottom() {
		liftEncoder.reset();
	}

	public double getLiftRate() {				
		return returnPIDInput();
	}

}
