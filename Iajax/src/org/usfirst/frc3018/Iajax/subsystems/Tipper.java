// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3018.Iajax.subsystems;

import org.usfirst.frc3018.Iajax.RobotMap;
import org.usfirst.frc3018.Iajax.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class Tipper extends PIDSubsystem {
    final double TOLERANCE = 4.0;

	public enum TipPosition {
		DRIVE_POSITION(RobotMap.RobotSetting.TIPPER_BACK.get()),
		CATCH_POSITION(RobotMap.RobotSetting.TIPPER_BACK.get()),
		VERTICAL_POSITION(RobotMap.RobotSetting.TIPPER_VERTICLE.get()), 
		CURRENT_POSITION(0);
		
		private final double m_setpoint;
		
		public double getSetpoint() {
			return m_setpoint;
		}
		
	    TipPosition(double setpoint) {
			m_setpoint = setpoint;
		}
	}
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController tipperMotor = RobotMap.tipperTipperMotor;
    AnalogPotentiometer tipperPot = RobotMap.tipperTipperPot;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Initialize your subsystem here
    public Tipper() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("Tipper", 100.0, 0.0, 0.0);
        setAbsoluteTolerance(0.005);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("Tipper", "PIDSubsystem Controller", getPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        setAbsoluteTolerance(0.001);
        getPIDController().setPID(300, 0, 0);
        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return tipperPot.get();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }
    
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
        output=RobotMap.RobotSetting.TIPPER_PID_DIRECTION.get()*output;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        tipperMotor.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }

	
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

	public void tipForward(double d) {
		getPIDController().reset();
		tipperMotor.set(d);	
	}

	public boolean isTippedTo(TipPosition pos) {
		return Math.abs(tipperPot.pidGet()-pos.getSetpoint())<TOLERANCE;
	}
	
	public void tipToPosition(TipPosition pos) {
		setSetpoint(pos.getSetpoint());
		enable();
	}

	public void disablePIDs() {
		getPIDController().reset();
	}
	public void updateStatus() {
		SmartDashboard.putNumber("tipper Setpoint" , getSetpoint());
	       SmartDashboard.putNumber("tipperPot" , tipperPot.pidGet());
		}
}
