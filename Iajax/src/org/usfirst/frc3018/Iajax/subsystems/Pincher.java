// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3018.Iajax.subsystems;

import org.usfirst.frc3018.Iajax.RobotMap;
import org.usfirst.frc3018.Iajax.commands.*;
import org.usfirst.frc3018.Iajax.subsystems.Tipper.TipPosition;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class Pincher extends PIDSubsystem {
	   final double TOLERANCE = 4.0;

		public enum PinchPosition {
			LIFT_TOTE_POSITION(.740),
			AVOID_TOP_POSITION(.82),
			LIFT_CONTAINER_POSITION(.78),
			WIDE_OPEN_POSITION(.83);
		
			private final double m_setpoint;
			
			public double getSetpoint() {
				return m_setpoint;
			}
			
		    PinchPosition(double setpoint) {
				m_setpoint = setpoint;
			}
		}
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController pincherMotor = RobotMap.pincherPincherMotor;
    AnalogPotentiometer pincherPot = RobotMap.pincherPincherPot;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Initialize your subsystem here
    public Pincher() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("Pincher", 300.0, 0.0, 0.0);
        setAbsoluteTolerance(0.003);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("Pincher", "PIDSubsystem Controller", getPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new ControllPincherWithJoystick());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return pincherPot.get();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }
    
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        pincherMotor.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
    
	public void pinch(double d) {
		getPIDController().reset();
		pincherMotor.set(d);	
	}

	public boolean isPinchedTo(PinchPosition pos) {
		return Math.abs(pincherPot.pidGet()-pos.getSetpoint())<TOLERANCE;
	}
	
    public void pinchToPosition(PinchPosition pos) {
		setSetpoint(pos.getSetpoint());
		enable();
	}

	public void disablePIDs() {
		getPIDController().reset();
	}
	
	public void updateStatus() {
	   SmartDashboard.putBoolean("pincherEnabled" , getPIDController().isEnable());
       SmartDashboard.putNumber("pincherPot" , pincherPot.pidGet());
       SmartDashboard.putNumber("pincherSetpoint" , getPIDController().getSetpoint());
       
	}
}
