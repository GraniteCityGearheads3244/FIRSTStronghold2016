// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.SirAntsABot;

import org.usfirst.frc3244.SirAntsABot.subsystems.NordicSpeedController;
import org.usfirst.frc3244.SirAntsABot.RobotMap.RobotSetting;
import edu.wpi.first.wpilibj.RobotDrive;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Victor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController clawPIDmotor_Claw;
    public static AnalogPotentiometer clawPIDPot_Width;
    public static PowerDistributionPanel controlPDP;
    public static SpeedController driveTrainMotor_Left_Front;
    public static SpeedController driveTrainMotor_Left_Rear;
    public static SpeedController driveTrainMotor_Right_Front;
    public static SpeedController driveTrainMotor_Right_Rear;
    public static Encoder driveTrainEncoder_Left_Rear;
    public static Encoder driveTrainEncoder_Left_Front;
    public static Encoder driveTrainEncoder_Right_Rear;
    public static Encoder driveTrainEncoder_Right_Front;
    public static AnalogGyro driveTrainRobot_Gyro;
    public static Relay pinBallMotor_PinBall;
    public static DigitalInput pinBallLimit_Switch_Pinball_Reset;
    public static SpeedController scissorPIDMotor_Height;
    public static AnalogPotentiometer scissorPIDPot_Height;
    public static CANTalon seaLegsMotor_Left_CAN;
    public static CANTalon seaLegsMotor_Right_CAN;
    public static Encoder seaLegsEncoder_Left;
    public static Encoder seaLegsEncoder_Right;
    public static SpeedController wristPIDMotor_Angle;
    public static AnalogPotentiometer wristPIDPot_Angle;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    //Start Code to use the NorticSpeedControler
    public enum RobotSetting {
    	DRIVETRAIN_ENCODER_TO_360(1.0, 360.0/250.0),
		DRIVETRAIN_ROTATION_P_VALUE(0.04, 0.04), 
		MINIMAL_DRIVE_SPEED(0.1, 0.1),
    	WRIST_STOW_POSITION(90,90),
    	WRIST_CAPTURE_POSITION(0,0),
    	SEALEGS_ENCODER_TO_360(1.0,1.0);
	
		private final double m_competitionSetting;
		private final double m_practiceSetting;
		
		private final boolean isCompetitionBot = true;
		
		public double get() {
			return isCompetitionBot ? m_competitionSetting : m_practiceSetting; 
		}
		
	    RobotSetting(double competitionSetting, double practiceSetting) {
	    	m_competitionSetting = competitionSetting;
	    	m_practiceSetting = practiceSetting;
		}
	}
    
    public static RobotDrive driveTrainRobotDrive41;


    public static NordicSpeedController nordicLF = null;
    public static NordicSpeedController nordicLR = null;
    public static NordicSpeedController nordicRF = null;
    public static NordicSpeedController nordicRR = null;
    
    public static RobotDrive seaLegsRobotDrive;
    
    public static NordicSpeedController nordic_SeaLegsLeft = null;
    public static NordicSpeedController nordic_SeaLegsRight = null;
    
    //End Code to use the NorticSpeedControler
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        clawPIDmotor_Claw = new Victor(5);
        LiveWindow.addActuator("ClawPID", "motor_Claw", (Victor) clawPIDmotor_Claw);
        
        clawPIDPot_Width = new AnalogPotentiometer(2, 5.0, 0.0);
        LiveWindow.addSensor("ClawPID", "Pot_Width", clawPIDPot_Width);
        
        controlPDP = new PowerDistributionPanel(0);
        LiveWindow.addSensor("Control", "PDP", controlPDP);
        
        driveTrainMotor_Left_Front = new Talon(2);
        LiveWindow.addActuator("DriveTrain", "Motor_Left_Front", (Talon) driveTrainMotor_Left_Front);
        
        driveTrainMotor_Left_Rear = new Talon(3);
        LiveWindow.addActuator("DriveTrain", "Motor_Left_Rear", (Talon) driveTrainMotor_Left_Rear);
        
        driveTrainMotor_Right_Front = new Talon(0);
        LiveWindow.addActuator("DriveTrain", "Motor_Right_Front", (Talon) driveTrainMotor_Right_Front);
        
        driveTrainMotor_Right_Rear = new Talon(1);
        LiveWindow.addActuator("DriveTrain", "Motor_Right_Rear", (Talon) driveTrainMotor_Right_Rear);
        
        driveTrainEncoder_Left_Rear = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Encoder_Left_Rear", driveTrainEncoder_Left_Rear);
        driveTrainEncoder_Left_Rear.setDistancePerPulse(1.0);
        driveTrainEncoder_Left_Rear.setPIDSourceType(PIDSourceType.kRate);
        driveTrainEncoder_Left_Front = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Encoder_Left_Front", driveTrainEncoder_Left_Front);
        driveTrainEncoder_Left_Front.setDistancePerPulse(1.0);
        driveTrainEncoder_Left_Front.setPIDSourceType(PIDSourceType.kRate);
        driveTrainEncoder_Right_Rear = new Encoder(6, 7, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Encoder_Right_Rear", driveTrainEncoder_Right_Rear);
        driveTrainEncoder_Right_Rear.setDistancePerPulse(1.0);
        driveTrainEncoder_Right_Rear.setPIDSourceType(PIDSourceType.kRate);
        driveTrainEncoder_Right_Front = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Encoder_Right_Front", driveTrainEncoder_Right_Front);
        driveTrainEncoder_Right_Front.setDistancePerPulse(1.0);
        driveTrainEncoder_Right_Front.setPIDSourceType(PIDSourceType.kRate);
        driveTrainRobot_Gyro = new AnalogGyro(0);
        LiveWindow.addSensor("DriveTrain", "Robot_Gyro", driveTrainRobot_Gyro);
        driveTrainRobot_Gyro.setSensitivity(0.007);
        pinBallMotor_PinBall = new Relay(0);
        LiveWindow.addActuator("PinBall", "Motor_PinBall", pinBallMotor_PinBall);
        
        pinBallLimit_Switch_Pinball_Reset = new DigitalInput(8);
        LiveWindow.addSensor("PinBall", "Limit_Switch_Pinball_Reset", pinBallLimit_Switch_Pinball_Reset);
        
        scissorPIDMotor_Height = new Spark(6);
        LiveWindow.addActuator("ScissorPID", "Motor_Height", (Spark) scissorPIDMotor_Height);
        
        scissorPIDPot_Height = new AnalogPotentiometer(3, 5.0, 0.0);
        LiveWindow.addSensor("ScissorPID", "Pot_Height", scissorPIDPot_Height);
        
        seaLegsMotor_Left_CAN = new CANTalon(2);
        LiveWindow.addActuator("SeaLegs", "Motor_Left_CAN", seaLegsMotor_Left_CAN);
        
        seaLegsMotor_Right_CAN = new CANTalon(1);
        LiveWindow.addActuator("SeaLegs", "Motor_Right_CAN", seaLegsMotor_Right_CAN);
        
        seaLegsEncoder_Left = new Encoder(10, 11, false, EncodingType.k4X);
        LiveWindow.addSensor("SeaLegs", "Encoder_Left", seaLegsEncoder_Left);
        seaLegsEncoder_Left.setDistancePerPulse(1.0);
        seaLegsEncoder_Left.setPIDSourceType(PIDSourceType.kRate);
        seaLegsEncoder_Right = new Encoder(12, 13, false, EncodingType.k4X);
        LiveWindow.addSensor("SeaLegs", "Encoder_Right", seaLegsEncoder_Right);
        seaLegsEncoder_Right.setDistancePerPulse(1.0);
        seaLegsEncoder_Right.setPIDSourceType(PIDSourceType.kRate);
        wristPIDMotor_Angle = new Spark(4);
        LiveWindow.addActuator("WristPID", "Motor_Angle", (Spark) wristPIDMotor_Angle);
        
        wristPIDPot_Angle = new AnalogPotentiometer(1, 5.0, 0.0);
        LiveWindow.addSensor("WristPID", "Pot_Angle", wristPIDPot_Angle);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
//Start Code to use the NorticSpeedControler
        
        driveTrainEncoder_Left_Front.setDistancePerPulse(RobotSetting.DRIVETRAIN_ENCODER_TO_360.get());
        driveTrainEncoder_Right_Front.setDistancePerPulse(RobotSetting.DRIVETRAIN_ENCODER_TO_360.get());
        driveTrainEncoder_Left_Rear.setDistancePerPulse(RobotSetting.DRIVETRAIN_ENCODER_TO_360.get());
        driveTrainEncoder_Right_Rear.setDistancePerPulse(RobotSetting.DRIVETRAIN_ENCODER_TO_360.get());
        double p = 2.0;
        double i = 0.001;
        double d = 0;
        nordicLF = new NordicSpeedController(driveTrainMotor_Left_Front, driveTrainEncoder_Left_Front,p,i,d);
        nordicLR = new NordicSpeedController(driveTrainMotor_Left_Rear, driveTrainEncoder_Left_Rear,p,i,d);
        nordicRF = new NordicSpeedController(driveTrainMotor_Right_Front, driveTrainEncoder_Right_Front,p,i,d);
        nordicRR = new NordicSpeedController(driveTrainMotor_Right_Rear, driveTrainEncoder_Right_Rear,p,i,d);
        
        driveTrainRobotDrive41 = new RobotDrive(nordicLF, nordicLR, nordicRF, nordicRR);
        
        driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        //driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        //driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
          
        driveTrainRobotDrive41.setSafetyEnabled(true);
        driveTrainRobotDrive41.setExpiration(0.1);
        driveTrainRobotDrive41.setSensitivity(0.5);
        driveTrainRobotDrive41.setMaxOutput(1.0);
        
        /*
         * Set Up Nortic SeaLegs
        
        seaLegsEncoder_Left.setDistancePerPulse(RobotSetting.SEALEGS_ENCODER_TO_360.get());
        seaLegsEncoder_Right.setDistancePerPulse(RobotSetting.SEALEGS_ENCODER_TO_360.get());
        
        nordic_SeaLegsLeft = new NordicSpeedController(seaLegsMotor_Left_CAN, seaLegsEncoder_Left);
        nordic_SeaLegsRight = new NordicSpeedController(seaLegsMotor_Right_CAN, seaLegsEncoder_Right);
        
        seaLegsRobotDrive = new RobotDrive(nordic_SeaLegsLeft, nordic_SeaLegsRight);
        
        //seaLegsRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        seaLegsRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        
        seaLegsRobotDrive.setSafetyEnabled(true);
        seaLegsRobotDrive.setExpiration(0.1);
        seaLegsRobotDrive.setSensitivity(0.5);
        seaLegsRobotDrive.setMaxOutput(1.0);
        
         */
    }
}
