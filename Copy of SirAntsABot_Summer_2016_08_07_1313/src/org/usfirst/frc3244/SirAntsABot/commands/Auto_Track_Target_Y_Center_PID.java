package org.usfirst.frc3244.SirAntsABot.commands;

import org.usfirst.frc3244.SirAntsABot.Robot;
import org.usfirst.frc3244.SirAntsABot.RobotMap;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.PIDCommand;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class Auto_Track_Target_Y_Center_PID extends PIDCommand {
	 private static final int image_Width = RobotMap.CAMERA_IMAGE_WIDTH;
	    private static final int image_Height = RobotMap.CAMERA_IMAGE_HEIGHT;
		private double w_setpoint=0;
		private double PID_Deg_Multiplier = 1;
		private boolean target_Found = false;
		
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Auto_Track_Target_Y_Center_PID() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("PID_Wrist", .004, 0.000000, 0.0000, 0.02);//, 0.00005, 0.0002, 0.02);
        getPIDController().setContinuous(false);
        getPIDController().setAbsoluteTolerance(0.2);
        
      
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        requires(Robot.wristPID);
		//needs Robot.vision but so do others
		//requires(Robot.vision);
       
    }

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage
       
        return Robot.vision.my_Get_Ycenter_REAL_PID();

      
    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
    	if(timeSinceInitialized() > Robot.vision.light_Settle_Time){
    	w_setpoint = Robot.wristPID.getSetpoint()-(output*PID_Deg_Multiplier);
    	}else{
    		w_setpoint = Robot.wristPID.getSetpoint();
    	}
    	//System.out.println("w_setpoint=" +  w_setpoint);
		Robot.wristPID.setSetpoint(w_setpoint);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	System.out.println("Auto_Track_Target_Y_Center_PID init");
    	//SmartDashboard.putNumber("Tunning", .005);
    	Robot.vision.my_CameraLight_Toggle(true);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	System.out.println("Auto_Track_Target_Y_CenterPID end()");
    	if(Robot.vision.my_Target_Found()){
    		double w_setpoint = Robot.wristPID.getPosition();
    		double final_Wrist_Deg = Robot.vision.my_GetFinalWristAngle(w_setpoint);
    		if(final_Wrist_Deg!=0){
    			w_setpoint = final_Wrist_Deg; 
    		}else{
    			w_setpoint = w_setpoint; 
    		}
    		Robot.wristPID.setSetpoint(w_setpoint );
    	}
    	Robot.vision.my_CameraLight_Toggle(false);
    }
    

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}